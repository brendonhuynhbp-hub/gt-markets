{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMSrow0EYel5XOte95vNb/O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/blackbudge98-cpu/gt-markets/blob/main/BTC%20Keyword%20Trend%20Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xVWafnIOOBTR",
        "outputId": "233dc57e-9060-401a-f114-1abeaf8c50b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1543323051.py:20: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download(tickers, period=\"10y\", interval=\"1d\")\n",
            "[*********************100%***********************]  5 of 5 completed\n",
            "/tmp/ipython-input-1543323051.py:43: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  df_merged = df_merged.fillna(method='ffill')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            BTC-USD Close  CL=F Close    DXY Close   GC=F Close  \\\n",
              "Date                                                              \n",
              "2015-09-08     243.606995   45.939999   930.440002  1120.400024   \n",
              "2015-09-09     238.167999   44.150002   938.400024  1102.199951   \n",
              "2015-09-10     238.477005   45.919998   913.510010  1109.500000   \n",
              "2015-09-11     240.106995   44.630001   922.140015  1103.500000   \n",
              "2015-09-14     230.643997   44.000000   941.059998  1107.699951   \n",
              "2015-09-15     230.304001   44.590000   991.849976  1102.800049   \n",
              "2015-09-16     229.091003   47.150002   982.549988  1119.199951   \n",
              "2015-09-17     229.809998   46.900002   991.849976  1117.300049   \n",
              "2015-09-18     232.975006   44.680000  1039.979980  1138.099976   \n",
              "2015-09-21     227.085007   46.680000  1001.140015  1133.099976   \n",
              "2015-09-22     230.617996   45.830002  1024.709961  1125.000000   \n",
              "2015-09-23     230.283005   44.480000   988.530029  1131.599976   \n",
              "2015-09-24     234.529007   44.910000   981.890015  1153.800049   \n",
              "2015-09-25     235.143997   45.700001   966.950012  1146.000000   \n",
              "2015-09-28     239.141998   44.430000   931.440002  1132.000000   \n",
              "2015-09-29     236.686996   45.230000   909.530029  1127.099976   \n",
              "2015-09-30     236.059998   45.090000   921.140015  1115.500000   \n",
              "2015-10-01     237.548996   44.740002   865.049988  1114.199951   \n",
              "2015-10-02     237.292999   45.540001   848.450012  1137.099976   \n",
              "2015-10-05     240.382996   46.259998   910.190002  1138.099976   \n",
              "2015-10-06     246.063004   48.529999   920.809998  1146.800049   \n",
              "2015-10-07     242.968994   47.810001   977.909973  1149.000000   \n",
              "2015-10-08     242.304001   49.430000   950.020020  1144.699951   \n",
              "2015-10-09     243.931000   49.630001   941.059998  1156.300049   \n",
              "2015-10-12     245.307999   47.099998   951.349976  1164.900024   \n",
              "2015-10-13     249.507996   46.660000   934.750000  1165.800049   \n",
              "2015-10-14     251.988998   46.639999   927.119995  1180.099976   \n",
              "2015-10-15     254.320007   46.380001   968.609985  1187.900024   \n",
              "2015-10-16     262.868988   47.259998   969.270020  1183.599976   \n",
              "2015-10-19     263.437012   45.889999   958.650024  1173.300049   \n",
              "2015-10-20     269.463013   45.549999   977.909973  1178.000000   \n",
              "2015-10-21     266.272003   45.200001   972.260010  1167.599976   \n",
              "2015-10-22     274.023010   45.380001   979.900024  1166.599976   \n",
              "2015-10-23     276.496002   44.599998   980.559998  1163.300049   \n",
              "2015-10-26     285.299988   43.980000   985.869995  1167.000000   \n",
              "2015-10-27     293.787994   43.200001  1022.719971  1166.800049   \n",
              "2015-10-28     304.618011   45.939999  1022.719971  1177.099976   \n",
              "2015-10-29     313.855011   46.060001  1018.070007  1147.199951   \n",
              "2015-10-30     328.015015   46.590000   972.929993  1141.500000   \n",
              "2015-11-02     361.188995   46.139999  1026.040039  1135.800049   \n",
              "\n",
              "            USDCNY=X Close  BTC-USD Open  CL=F Open     DXY Open    GC=F Open  \\\n",
              "Date                                                                            \n",
              "2015-09-08          6.3559    239.845993  45.820000   930.440002  1119.800049   \n",
              "2015-09-09          6.3572    243.414993  45.790001   938.400024  1123.500000   \n",
              "2015-09-10          6.3678    238.335999  44.160000   913.510010  1107.300049   \n",
              "2015-09-11          6.3672    238.328995  45.709999   922.140015  1110.800049   \n",
              "2015-09-14          6.3650    230.608994  44.779999   941.059998  1107.800049   \n",
              "2015-09-15          6.3579    230.492004  44.110001   991.849976  1104.500000   \n",
              "2015-09-16          6.3600    230.250000  45.160000   982.549988  1109.800049   \n",
              "2015-09-17          6.3609    229.076004  47.130001   991.849976  1118.599976   \n",
              "2015-09-18          6.3560    233.520996  46.889999  1039.979980  1128.300049   \n",
              "2015-09-21          6.3543    231.216995  44.970001  1001.140015  1137.599976   \n",
              "2015-09-22          6.3591    226.968994  46.450001  1024.709961  1132.599976   \n",
              "2015-09-23          6.3660    230.936005  46.540001   988.530029  1128.599976   \n",
              "2015-09-24          6.3737    230.358002  44.619999   981.890015  1133.000000   \n",
              "2015-09-25          6.3733    234.362000  45.049999   966.950012  1149.800049   \n",
              "2015-09-28          6.3641    232.835999  45.380001   931.440002  1133.199951   \n",
              "2015-09-29          6.3588    239.016006  44.500000   909.530029  1132.199951   \n",
              "2015-09-30          6.3536    236.639999  44.919998   921.140015  1124.300049   \n",
              "2015-10-01          6.3471    236.003998  45.380001   865.049988  1115.199951   \n",
              "2015-10-02          6.3461    237.264008  45.070000   848.450012  1112.199951   \n",
              "2015-10-05          6.3461    238.147003  45.650002   910.190002  1137.099976   \n",
              "2015-10-06          6.3461    240.363998  46.200001   920.809998  1136.300049   \n",
              "2015-10-07          6.3461    246.169998  49.000000   977.909973  1147.599976   \n",
              "2015-10-08          6.3461    243.074997  48.110001   950.020020  1142.699951   \n",
              "2015-10-09          6.3435    242.498001  49.689999   941.059998  1151.599976   \n",
              "2015-10-12          6.3353    246.875000  49.509998   951.349976  1155.900024   \n",
              "2015-10-13          6.3130    245.199997  47.459999   934.750000  1163.500000   \n",
              "2015-10-14          6.3323    249.492996  46.689999   927.119995  1172.400024   \n",
              "2015-10-15          6.3377    252.106995  46.279999   968.609985  1184.199951   \n",
              "2015-10-16          6.3362    254.296005  46.869999   969.270020  1182.500000   \n",
              "2015-10-19          6.3426    261.860992  47.270000   958.650024  1176.500000   \n",
              "2015-10-20          6.3501    263.571991  46.250000   977.909973  1168.699951   \n",
              "2015-10-21          6.3384    269.306000  45.880001   972.260010  1175.900024   \n",
              "2015-10-22          6.3393    266.496002  45.270000   979.900024  1166.199951   \n",
              "2015-10-23          6.3480    273.648987  45.439999   980.559998  1166.199951   \n",
              "2015-10-26          6.3391    283.627991  44.740002   985.869995  1165.099976   \n",
              "2015-10-27          6.3432    285.181000  43.779999  1022.719971  1164.500000   \n",
              "2015-10-28          6.3432    293.703003  43.439999  1022.719971  1175.099976   \n",
              "2015-10-29          6.3493    304.324005  46.060001  1018.070007  1158.000000   \n",
              "2015-10-30          6.3467    313.942993  45.740002   972.929993  1147.500000   \n",
              "2015-11-02          6.3081    325.941986  46.430000  1026.040039  1137.900024   \n",
              "\n",
              "            USDCNY=X Open  ...  DXY Log Returns  USDCNY=X Log Returns  \\\n",
              "Date                       ...                                          \n",
              "2015-09-08         6.3559  ...              NaN                   NaN   \n",
              "2015-09-09         6.3572  ...         0.008519              0.000205   \n",
              "2015-09-10         6.3678  ...        -0.026882              0.001666   \n",
              "2015-09-11         6.3672  ...         0.009403             -0.000094   \n",
              "2015-09-14         6.3650  ...         0.020310             -0.000346   \n",
              "2015-09-15         6.3579  ...         0.052565             -0.001116   \n",
              "2015-09-16         6.3600  ...        -0.009421              0.000330   \n",
              "2015-09-17         6.3609  ...         0.009421              0.000141   \n",
              "2015-09-18         6.3560  ...         0.047385             -0.000771   \n",
              "2015-09-21         6.3543  ...        -0.038062             -0.000267   \n",
              "2015-09-22         6.3591  ...         0.023270              0.000755   \n",
              "2015-09-23         6.3660  ...        -0.035946              0.001085   \n",
              "2015-09-24         6.3737  ...        -0.006740              0.001209   \n",
              "2015-09-25         6.3733  ...        -0.015333             -0.000063   \n",
              "2015-09-28         6.3641  ...        -0.037415             -0.001445   \n",
              "2015-09-29         6.3588  ...        -0.023804             -0.000833   \n",
              "2015-09-30         6.3536  ...         0.012684             -0.000818   \n",
              "2015-10-01         6.3471  ...        -0.062825             -0.001024   \n",
              "2015-10-02         6.3461  ...        -0.019376             -0.000158   \n",
              "2015-10-05         6.3461  ...         0.070242              0.000000   \n",
              "2015-10-06         6.3461  ...         0.011600              0.000000   \n",
              "2015-10-07         6.3461  ...         0.060164              0.000000   \n",
              "2015-10-08         6.3461  ...        -0.028935              0.000000   \n",
              "2015-10-09         6.3435  ...        -0.009476             -0.000410   \n",
              "2015-10-12         6.3353  ...         0.010875             -0.001294   \n",
              "2015-10-13         6.3130  ...        -0.017603             -0.003526   \n",
              "2015-10-14         6.3323  ...        -0.008196              0.003053   \n",
              "2015-10-15         6.3377  ...         0.043779              0.000852   \n",
              "2015-10-16         6.3362  ...         0.000681             -0.000237   \n",
              "2015-10-19         6.3426  ...        -0.011017              0.001010   \n",
              "2015-10-20         6.3501  ...         0.019892              0.001182   \n",
              "2015-10-21         6.3384  ...        -0.005794             -0.001844   \n",
              "2015-10-22         6.3393  ...         0.007827              0.000142   \n",
              "2015-10-23         6.3480  ...         0.000673              0.001371   \n",
              "2015-10-26         6.3391  ...         0.005401             -0.001403   \n",
              "2015-10-27         6.3432  ...         0.036696              0.000647   \n",
              "2015-10-28         6.3432  ...         0.000000              0.000000   \n",
              "2015-10-29         6.3493  ...        -0.004557              0.000961   \n",
              "2015-10-30         6.3467  ...        -0.045352             -0.000410   \n",
              "2015-11-02         6.3081  ...         0.053150             -0.006100   \n",
              "\n",
              "            BTC-USD Log Returns  CL=F Log Returns  GC=F Log Returns  \\\n",
              "Date                                                                  \n",
              "2015-09-08                  NaN               NaN               NaN   \n",
              "2015-09-09            -0.022580         -0.039743         -0.016378   \n",
              "2015-09-10             0.001297          0.039308          0.006601   \n",
              "2015-09-11             0.006812         -0.028494         -0.005423   \n",
              "2015-09-14            -0.040209         -0.014217          0.003799   \n",
              "2015-09-15            -0.001475          0.013320         -0.004433   \n",
              "2015-09-16            -0.005281          0.055824          0.014762   \n",
              "2015-09-17             0.003134         -0.005316         -0.001699   \n",
              "2015-09-18             0.013678         -0.048492          0.018445   \n",
              "2015-09-21            -0.025607          0.043790         -0.004403   \n",
              "2015-09-22             0.015438         -0.018377         -0.007174   \n",
              "2015-09-23            -0.001454         -0.029899          0.005850   \n",
              "2015-09-24             0.018270          0.009621          0.019428   \n",
              "2015-09-25             0.002619          0.017438         -0.006783   \n",
              "2015-09-28             0.016859         -0.028183         -0.012292   \n",
              "2015-09-29            -0.010319          0.017846         -0.004338   \n",
              "2015-09-30            -0.002653         -0.003100         -0.010345   \n",
              "2015-10-01             0.006288         -0.007793         -0.001166   \n",
              "2015-10-02            -0.001078          0.017723          0.020345   \n",
              "2015-10-05             0.012938          0.015687          0.000879   \n",
              "2015-10-06             0.023354          0.047905          0.007615   \n",
              "2015-10-07            -0.012654         -0.014947          0.001917   \n",
              "2015-10-08            -0.002741          0.033323         -0.003749   \n",
              "2015-10-09             0.006692          0.004038          0.010083   \n",
              "2015-10-12             0.005629         -0.052323          0.007410   \n",
              "2015-10-13             0.016976         -0.009386          0.000772   \n",
              "2015-10-14             0.009894         -0.000429          0.012192   \n",
              "2015-10-15             0.009208         -0.005590          0.006588   \n",
              "2015-10-16             0.033062          0.018796         -0.003626   \n",
              "2015-10-19             0.002159         -0.029417         -0.008740   \n",
              "2015-10-20             0.022617         -0.007437          0.003998   \n",
              "2015-10-21            -0.011913         -0.007714         -0.008868   \n",
              "2015-10-22             0.028694          0.003974         -0.000857   \n",
              "2015-10-23             0.008984         -0.017338         -0.002833   \n",
              "2015-10-26             0.031345         -0.013999          0.003176   \n",
              "2015-10-27             0.029317         -0.017894         -0.000171   \n",
              "2015-10-28             0.036200          0.061496          0.008789   \n",
              "2015-10-29             0.029873          0.002609         -0.025730   \n",
              "2015-10-30             0.044128          0.011441         -0.004981   \n",
              "2015-11-02             0.096342         -0.009706         -0.005006   \n",
              "\n",
              "            DXY 30-day Rolling Volatility  USDCNY=X 30-day Rolling Volatility  \\\n",
              "Date                                                                            \n",
              "2015-09-08                            NaN                                 NaN   \n",
              "2015-09-09                            NaN                                 NaN   \n",
              "2015-09-10                       0.024805                            0.001034   \n",
              "2015-09-11                       0.020515                            0.000943   \n",
              "2015-09-14                       0.020420                            0.000901   \n",
              "2015-09-15                       0.028851                            0.001022   \n",
              "2015-09-16                       0.027401                            0.000920   \n",
              "2015-09-17                       0.025013                            0.000840   \n",
              "2015-09-18                       0.026968                            0.000838   \n",
              "2015-09-21                       0.030545                            0.000789   \n",
              "2015-09-22                       0.029184                            0.000784   \n",
              "2015-09-23                       0.030884                            0.000807   \n",
              "2015-09-24                       0.029673                            0.000828   \n",
              "2015-09-25                       0.028952                            0.000797   \n",
              "2015-09-28                       0.029807                            0.000884   \n",
              "2015-09-29                       0.029384                            0.000885   \n",
              "2015-09-30                       0.028599                            0.000881   \n",
              "2015-10-01                       0.031355                            0.000887   \n",
              "2015-10-02                       0.030634                            0.000861   \n",
              "2015-10-05                       0.034668                            0.000837   \n",
              "2015-10-06                       0.033855                            0.000814   \n",
              "2015-10-07                       0.035663                            0.000794   \n",
              "2015-10-08                       0.035445                            0.000775   \n",
              "2015-10-09                       0.034705                            0.000761   \n",
              "2015-10-12                       0.034002                            0.000784   \n",
              "2015-10-13                       0.033501                            0.001023   \n",
              "2015-10-14                       0.032870                            0.001196   \n",
              "2015-10-15                       0.033344                            0.001188   \n",
              "2015-10-16                       0.032722                            0.001166   \n",
              "2015-10-19                       0.032222                            0.001164   \n",
              "2015-10-20                       0.031842                            0.001167   \n",
              "2015-10-21                       0.031850                            0.001211   \n",
              "2015-10-22                       0.031416                            0.001166   \n",
              "2015-10-23                       0.031393                            0.001199   \n",
              "2015-10-26                       0.031215                            0.001221   \n",
              "2015-10-27                       0.030399                            0.001215   \n",
              "2015-10-28                       0.030332                            0.001213   \n",
              "2015-10-29                       0.030318                            0.001227   \n",
              "2015-10-30                       0.030070                            0.001222   \n",
              "2015-11-02                       0.030992                            0.001645   \n",
              "\n",
              "            BTC-USD 30-day Rolling Volatility  CL=F 30-day Rolling Volatility  \\\n",
              "Date                                                                            \n",
              "2015-09-08                                NaN                             NaN   \n",
              "2015-09-09                                NaN                             NaN   \n",
              "2015-09-10                           0.016705                        0.055900   \n",
              "2015-09-11                           0.015488                        0.042850   \n",
              "2015-09-14                           0.021461                        0.035081   \n",
              "2015-09-15                           0.019336                        0.032173   \n",
              "2015-09-16                           0.017453                        0.038581   \n",
              "2015-09-17                           0.016695                        0.035432   \n",
              "2015-09-18                           0.017295                        0.037403   \n",
              "2015-09-21                           0.017479                        0.038421   \n",
              "2015-09-22                           0.018038                        0.036806   \n",
              "2015-09-23                           0.017152                        0.036057   \n",
              "2015-09-24                           0.017694                        0.034553   \n",
              "2015-09-25                           0.017013                        0.033497   \n",
              "2015-09-28                           0.017163                        0.033035   \n",
              "2015-09-29                           0.016704                        0.032245   \n",
              "2015-09-30                           0.016139                        0.031158   \n",
              "2015-10-01                           0.015751                        0.030217   \n",
              "2015-10-02                           0.015281                        0.029655   \n",
              "2015-10-05                           0.015212                        0.029049   \n",
              "2015-10-06                           0.015765                        0.030267   \n",
              "2015-10-07                           0.015634                        0.029762   \n",
              "2015-10-08                           0.015268                        0.029814   \n",
              "2015-10-09                           0.014985                        0.029128   \n",
              "2015-10-12                           0.014698                        0.030602   \n",
              "2015-10-13                           0.014773                        0.030035   \n",
              "2015-10-14                           0.014579                        0.029430   \n",
              "2015-10-15                           0.014375                        0.028886   \n",
              "2015-10-16                           0.015342                        0.028555   \n",
              "2015-10-19                           0.015066                        0.028602   \n",
              "2015-10-20                           0.015250                        0.028141   \n",
              "2015-10-21                           0.014750                        0.027208   \n",
              "2015-10-22                           0.015443                        0.026205   \n",
              "2015-10-23                           0.015459                        0.025877   \n",
              "2015-10-26                           0.013813                        0.025873   \n",
              "2015-10-27                           0.014304                        0.025953   \n",
              "2015-10-28                           0.014984                        0.026437   \n",
              "2015-10-29                           0.015393                        0.026427   \n",
              "2015-10-30                           0.016632                        0.024956   \n",
              "2015-11-02                           0.022086                        0.023662   \n",
              "\n",
              "            GC=F 30-day Rolling Volatility  \n",
              "Date                                        \n",
              "2015-09-08                             NaN  \n",
              "2015-09-09                             NaN  \n",
              "2015-09-10                        0.016170  \n",
              "2015-09-11                        0.011439  \n",
              "2015-09-14                        0.010328  \n",
              "2015-09-15                        0.008973  \n",
              "2015-09-16                        0.010882  \n",
              "2015-09-17                        0.009952  \n",
              "2015-09-18                        0.011396  \n",
              "2015-09-21                        0.010872  \n",
              "2015-09-22                        0.010593  \n",
              "2015-09-23                        0.010181  \n",
              "2015-09-24                        0.011102  \n",
              "2015-09-25                        0.010936  \n",
              "2015-09-28                        0.011154  \n",
              "2015-09-29                        0.010830  \n",
              "2015-09-30                        0.010802  \n",
              "2015-10-01                        0.010461  \n",
              "2015-10-02                        0.011274  \n",
              "2015-10-05                        0.010956  \n",
              "2015-10-06                        0.010771  \n",
              "2015-10-07                        0.010499  \n",
              "2015-10-08                        0.010301  \n",
              "2015-10-09                        0.010242  \n",
              "2015-10-12                        0.010092  \n",
              "2015-10-13                        0.009881  \n",
              "2015-10-14                        0.009903  \n",
              "2015-10-15                        0.009751  \n",
              "2015-10-16                        0.009632  \n",
              "2015-10-19                        0.009665  \n",
              "2015-10-20                        0.009507  \n",
              "2015-10-21                        0.009112  \n",
              "2015-10-22                        0.009082  \n",
              "2015-10-23                        0.009024  \n",
              "2015-10-26                        0.009020  \n",
              "2015-10-27                        0.008953  \n",
              "2015-10-28                        0.008716  \n",
              "2015-10-29                        0.010014  \n",
              "2015-10-30                        0.009490  \n",
              "2015-11-02                        0.009500  \n",
              "\n",
              "[40 rows x 40 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d34ab87b-a325-494d-a09b-d551f3e154fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD Close</th>\n",
              "      <th>CL=F Close</th>\n",
              "      <th>DXY Close</th>\n",
              "      <th>GC=F Close</th>\n",
              "      <th>USDCNY=X Close</th>\n",
              "      <th>BTC-USD Open</th>\n",
              "      <th>CL=F Open</th>\n",
              "      <th>DXY Open</th>\n",
              "      <th>GC=F Open</th>\n",
              "      <th>USDCNY=X Open</th>\n",
              "      <th>...</th>\n",
              "      <th>DXY Log Returns</th>\n",
              "      <th>USDCNY=X Log Returns</th>\n",
              "      <th>BTC-USD Log Returns</th>\n",
              "      <th>CL=F Log Returns</th>\n",
              "      <th>GC=F Log Returns</th>\n",
              "      <th>DXY 30-day Rolling Volatility</th>\n",
              "      <th>USDCNY=X 30-day Rolling Volatility</th>\n",
              "      <th>BTC-USD 30-day Rolling Volatility</th>\n",
              "      <th>CL=F 30-day Rolling Volatility</th>\n",
              "      <th>GC=F 30-day Rolling Volatility</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-09-08</th>\n",
              "      <td>243.606995</td>\n",
              "      <td>45.939999</td>\n",
              "      <td>930.440002</td>\n",
              "      <td>1120.400024</td>\n",
              "      <td>6.3559</td>\n",
              "      <td>239.845993</td>\n",
              "      <td>45.820000</td>\n",
              "      <td>930.440002</td>\n",
              "      <td>1119.800049</td>\n",
              "      <td>6.3559</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-09</th>\n",
              "      <td>238.167999</td>\n",
              "      <td>44.150002</td>\n",
              "      <td>938.400024</td>\n",
              "      <td>1102.199951</td>\n",
              "      <td>6.3572</td>\n",
              "      <td>243.414993</td>\n",
              "      <td>45.790001</td>\n",
              "      <td>938.400024</td>\n",
              "      <td>1123.500000</td>\n",
              "      <td>6.3572</td>\n",
              "      <td>...</td>\n",
              "      <td>0.008519</td>\n",
              "      <td>0.000205</td>\n",
              "      <td>-0.022580</td>\n",
              "      <td>-0.039743</td>\n",
              "      <td>-0.016378</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-10</th>\n",
              "      <td>238.477005</td>\n",
              "      <td>45.919998</td>\n",
              "      <td>913.510010</td>\n",
              "      <td>1109.500000</td>\n",
              "      <td>6.3678</td>\n",
              "      <td>238.335999</td>\n",
              "      <td>44.160000</td>\n",
              "      <td>913.510010</td>\n",
              "      <td>1107.300049</td>\n",
              "      <td>6.3678</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.026882</td>\n",
              "      <td>0.001666</td>\n",
              "      <td>0.001297</td>\n",
              "      <td>0.039308</td>\n",
              "      <td>0.006601</td>\n",
              "      <td>0.024805</td>\n",
              "      <td>0.001034</td>\n",
              "      <td>0.016705</td>\n",
              "      <td>0.055900</td>\n",
              "      <td>0.016170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-11</th>\n",
              "      <td>240.106995</td>\n",
              "      <td>44.630001</td>\n",
              "      <td>922.140015</td>\n",
              "      <td>1103.500000</td>\n",
              "      <td>6.3672</td>\n",
              "      <td>238.328995</td>\n",
              "      <td>45.709999</td>\n",
              "      <td>922.140015</td>\n",
              "      <td>1110.800049</td>\n",
              "      <td>6.3672</td>\n",
              "      <td>...</td>\n",
              "      <td>0.009403</td>\n",
              "      <td>-0.000094</td>\n",
              "      <td>0.006812</td>\n",
              "      <td>-0.028494</td>\n",
              "      <td>-0.005423</td>\n",
              "      <td>0.020515</td>\n",
              "      <td>0.000943</td>\n",
              "      <td>0.015488</td>\n",
              "      <td>0.042850</td>\n",
              "      <td>0.011439</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-14</th>\n",
              "      <td>230.643997</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1107.699951</td>\n",
              "      <td>6.3650</td>\n",
              "      <td>230.608994</td>\n",
              "      <td>44.779999</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1107.800049</td>\n",
              "      <td>6.3650</td>\n",
              "      <td>...</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>-0.000346</td>\n",
              "      <td>-0.040209</td>\n",
              "      <td>-0.014217</td>\n",
              "      <td>0.003799</td>\n",
              "      <td>0.020420</td>\n",
              "      <td>0.000901</td>\n",
              "      <td>0.021461</td>\n",
              "      <td>0.035081</td>\n",
              "      <td>0.010328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-15</th>\n",
              "      <td>230.304001</td>\n",
              "      <td>44.590000</td>\n",
              "      <td>991.849976</td>\n",
              "      <td>1102.800049</td>\n",
              "      <td>6.3579</td>\n",
              "      <td>230.492004</td>\n",
              "      <td>44.110001</td>\n",
              "      <td>991.849976</td>\n",
              "      <td>1104.500000</td>\n",
              "      <td>6.3579</td>\n",
              "      <td>...</td>\n",
              "      <td>0.052565</td>\n",
              "      <td>-0.001116</td>\n",
              "      <td>-0.001475</td>\n",
              "      <td>0.013320</td>\n",
              "      <td>-0.004433</td>\n",
              "      <td>0.028851</td>\n",
              "      <td>0.001022</td>\n",
              "      <td>0.019336</td>\n",
              "      <td>0.032173</td>\n",
              "      <td>0.008973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-16</th>\n",
              "      <td>229.091003</td>\n",
              "      <td>47.150002</td>\n",
              "      <td>982.549988</td>\n",
              "      <td>1119.199951</td>\n",
              "      <td>6.3600</td>\n",
              "      <td>230.250000</td>\n",
              "      <td>45.160000</td>\n",
              "      <td>982.549988</td>\n",
              "      <td>1109.800049</td>\n",
              "      <td>6.3600</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009421</td>\n",
              "      <td>0.000330</td>\n",
              "      <td>-0.005281</td>\n",
              "      <td>0.055824</td>\n",
              "      <td>0.014762</td>\n",
              "      <td>0.027401</td>\n",
              "      <td>0.000920</td>\n",
              "      <td>0.017453</td>\n",
              "      <td>0.038581</td>\n",
              "      <td>0.010882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-17</th>\n",
              "      <td>229.809998</td>\n",
              "      <td>46.900002</td>\n",
              "      <td>991.849976</td>\n",
              "      <td>1117.300049</td>\n",
              "      <td>6.3609</td>\n",
              "      <td>229.076004</td>\n",
              "      <td>47.130001</td>\n",
              "      <td>991.849976</td>\n",
              "      <td>1118.599976</td>\n",
              "      <td>6.3609</td>\n",
              "      <td>...</td>\n",
              "      <td>0.009421</td>\n",
              "      <td>0.000141</td>\n",
              "      <td>0.003134</td>\n",
              "      <td>-0.005316</td>\n",
              "      <td>-0.001699</td>\n",
              "      <td>0.025013</td>\n",
              "      <td>0.000840</td>\n",
              "      <td>0.016695</td>\n",
              "      <td>0.035432</td>\n",
              "      <td>0.009952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-18</th>\n",
              "      <td>232.975006</td>\n",
              "      <td>44.680000</td>\n",
              "      <td>1039.979980</td>\n",
              "      <td>1138.099976</td>\n",
              "      <td>6.3560</td>\n",
              "      <td>233.520996</td>\n",
              "      <td>46.889999</td>\n",
              "      <td>1039.979980</td>\n",
              "      <td>1128.300049</td>\n",
              "      <td>6.3560</td>\n",
              "      <td>...</td>\n",
              "      <td>0.047385</td>\n",
              "      <td>-0.000771</td>\n",
              "      <td>0.013678</td>\n",
              "      <td>-0.048492</td>\n",
              "      <td>0.018445</td>\n",
              "      <td>0.026968</td>\n",
              "      <td>0.000838</td>\n",
              "      <td>0.017295</td>\n",
              "      <td>0.037403</td>\n",
              "      <td>0.011396</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-21</th>\n",
              "      <td>227.085007</td>\n",
              "      <td>46.680000</td>\n",
              "      <td>1001.140015</td>\n",
              "      <td>1133.099976</td>\n",
              "      <td>6.3543</td>\n",
              "      <td>231.216995</td>\n",
              "      <td>44.970001</td>\n",
              "      <td>1001.140015</td>\n",
              "      <td>1137.599976</td>\n",
              "      <td>6.3543</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.038062</td>\n",
              "      <td>-0.000267</td>\n",
              "      <td>-0.025607</td>\n",
              "      <td>0.043790</td>\n",
              "      <td>-0.004403</td>\n",
              "      <td>0.030545</td>\n",
              "      <td>0.000789</td>\n",
              "      <td>0.017479</td>\n",
              "      <td>0.038421</td>\n",
              "      <td>0.010872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-22</th>\n",
              "      <td>230.617996</td>\n",
              "      <td>45.830002</td>\n",
              "      <td>1024.709961</td>\n",
              "      <td>1125.000000</td>\n",
              "      <td>6.3591</td>\n",
              "      <td>226.968994</td>\n",
              "      <td>46.450001</td>\n",
              "      <td>1024.709961</td>\n",
              "      <td>1132.599976</td>\n",
              "      <td>6.3591</td>\n",
              "      <td>...</td>\n",
              "      <td>0.023270</td>\n",
              "      <td>0.000755</td>\n",
              "      <td>0.015438</td>\n",
              "      <td>-0.018377</td>\n",
              "      <td>-0.007174</td>\n",
              "      <td>0.029184</td>\n",
              "      <td>0.000784</td>\n",
              "      <td>0.018038</td>\n",
              "      <td>0.036806</td>\n",
              "      <td>0.010593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-23</th>\n",
              "      <td>230.283005</td>\n",
              "      <td>44.480000</td>\n",
              "      <td>988.530029</td>\n",
              "      <td>1131.599976</td>\n",
              "      <td>6.3660</td>\n",
              "      <td>230.936005</td>\n",
              "      <td>46.540001</td>\n",
              "      <td>988.530029</td>\n",
              "      <td>1128.599976</td>\n",
              "      <td>6.3660</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.035946</td>\n",
              "      <td>0.001085</td>\n",
              "      <td>-0.001454</td>\n",
              "      <td>-0.029899</td>\n",
              "      <td>0.005850</td>\n",
              "      <td>0.030884</td>\n",
              "      <td>0.000807</td>\n",
              "      <td>0.017152</td>\n",
              "      <td>0.036057</td>\n",
              "      <td>0.010181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-24</th>\n",
              "      <td>234.529007</td>\n",
              "      <td>44.910000</td>\n",
              "      <td>981.890015</td>\n",
              "      <td>1153.800049</td>\n",
              "      <td>6.3737</td>\n",
              "      <td>230.358002</td>\n",
              "      <td>44.619999</td>\n",
              "      <td>981.890015</td>\n",
              "      <td>1133.000000</td>\n",
              "      <td>6.3737</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.006740</td>\n",
              "      <td>0.001209</td>\n",
              "      <td>0.018270</td>\n",
              "      <td>0.009621</td>\n",
              "      <td>0.019428</td>\n",
              "      <td>0.029673</td>\n",
              "      <td>0.000828</td>\n",
              "      <td>0.017694</td>\n",
              "      <td>0.034553</td>\n",
              "      <td>0.011102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-25</th>\n",
              "      <td>235.143997</td>\n",
              "      <td>45.700001</td>\n",
              "      <td>966.950012</td>\n",
              "      <td>1146.000000</td>\n",
              "      <td>6.3733</td>\n",
              "      <td>234.362000</td>\n",
              "      <td>45.049999</td>\n",
              "      <td>966.950012</td>\n",
              "      <td>1149.800049</td>\n",
              "      <td>6.3733</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.015333</td>\n",
              "      <td>-0.000063</td>\n",
              "      <td>0.002619</td>\n",
              "      <td>0.017438</td>\n",
              "      <td>-0.006783</td>\n",
              "      <td>0.028952</td>\n",
              "      <td>0.000797</td>\n",
              "      <td>0.017013</td>\n",
              "      <td>0.033497</td>\n",
              "      <td>0.010936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-28</th>\n",
              "      <td>239.141998</td>\n",
              "      <td>44.430000</td>\n",
              "      <td>931.440002</td>\n",
              "      <td>1132.000000</td>\n",
              "      <td>6.3641</td>\n",
              "      <td>232.835999</td>\n",
              "      <td>45.380001</td>\n",
              "      <td>931.440002</td>\n",
              "      <td>1133.199951</td>\n",
              "      <td>6.3641</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.037415</td>\n",
              "      <td>-0.001445</td>\n",
              "      <td>0.016859</td>\n",
              "      <td>-0.028183</td>\n",
              "      <td>-0.012292</td>\n",
              "      <td>0.029807</td>\n",
              "      <td>0.000884</td>\n",
              "      <td>0.017163</td>\n",
              "      <td>0.033035</td>\n",
              "      <td>0.011154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-29</th>\n",
              "      <td>236.686996</td>\n",
              "      <td>45.230000</td>\n",
              "      <td>909.530029</td>\n",
              "      <td>1127.099976</td>\n",
              "      <td>6.3588</td>\n",
              "      <td>239.016006</td>\n",
              "      <td>44.500000</td>\n",
              "      <td>909.530029</td>\n",
              "      <td>1132.199951</td>\n",
              "      <td>6.3588</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.023804</td>\n",
              "      <td>-0.000833</td>\n",
              "      <td>-0.010319</td>\n",
              "      <td>0.017846</td>\n",
              "      <td>-0.004338</td>\n",
              "      <td>0.029384</td>\n",
              "      <td>0.000885</td>\n",
              "      <td>0.016704</td>\n",
              "      <td>0.032245</td>\n",
              "      <td>0.010830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-30</th>\n",
              "      <td>236.059998</td>\n",
              "      <td>45.090000</td>\n",
              "      <td>921.140015</td>\n",
              "      <td>1115.500000</td>\n",
              "      <td>6.3536</td>\n",
              "      <td>236.639999</td>\n",
              "      <td>44.919998</td>\n",
              "      <td>921.140015</td>\n",
              "      <td>1124.300049</td>\n",
              "      <td>6.3536</td>\n",
              "      <td>...</td>\n",
              "      <td>0.012684</td>\n",
              "      <td>-0.000818</td>\n",
              "      <td>-0.002653</td>\n",
              "      <td>-0.003100</td>\n",
              "      <td>-0.010345</td>\n",
              "      <td>0.028599</td>\n",
              "      <td>0.000881</td>\n",
              "      <td>0.016139</td>\n",
              "      <td>0.031158</td>\n",
              "      <td>0.010802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-01</th>\n",
              "      <td>237.548996</td>\n",
              "      <td>44.740002</td>\n",
              "      <td>865.049988</td>\n",
              "      <td>1114.199951</td>\n",
              "      <td>6.3471</td>\n",
              "      <td>236.003998</td>\n",
              "      <td>45.380001</td>\n",
              "      <td>865.049988</td>\n",
              "      <td>1115.199951</td>\n",
              "      <td>6.3471</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.062825</td>\n",
              "      <td>-0.001024</td>\n",
              "      <td>0.006288</td>\n",
              "      <td>-0.007793</td>\n",
              "      <td>-0.001166</td>\n",
              "      <td>0.031355</td>\n",
              "      <td>0.000887</td>\n",
              "      <td>0.015751</td>\n",
              "      <td>0.030217</td>\n",
              "      <td>0.010461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-02</th>\n",
              "      <td>237.292999</td>\n",
              "      <td>45.540001</td>\n",
              "      <td>848.450012</td>\n",
              "      <td>1137.099976</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>237.264008</td>\n",
              "      <td>45.070000</td>\n",
              "      <td>848.450012</td>\n",
              "      <td>1112.199951</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.019376</td>\n",
              "      <td>-0.000158</td>\n",
              "      <td>-0.001078</td>\n",
              "      <td>0.017723</td>\n",
              "      <td>0.020345</td>\n",
              "      <td>0.030634</td>\n",
              "      <td>0.000861</td>\n",
              "      <td>0.015281</td>\n",
              "      <td>0.029655</td>\n",
              "      <td>0.011274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-05</th>\n",
              "      <td>240.382996</td>\n",
              "      <td>46.259998</td>\n",
              "      <td>910.190002</td>\n",
              "      <td>1138.099976</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>238.147003</td>\n",
              "      <td>45.650002</td>\n",
              "      <td>910.190002</td>\n",
              "      <td>1137.099976</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>...</td>\n",
              "      <td>0.070242</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.012938</td>\n",
              "      <td>0.015687</td>\n",
              "      <td>0.000879</td>\n",
              "      <td>0.034668</td>\n",
              "      <td>0.000837</td>\n",
              "      <td>0.015212</td>\n",
              "      <td>0.029049</td>\n",
              "      <td>0.010956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-06</th>\n",
              "      <td>246.063004</td>\n",
              "      <td>48.529999</td>\n",
              "      <td>920.809998</td>\n",
              "      <td>1146.800049</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>240.363998</td>\n",
              "      <td>46.200001</td>\n",
              "      <td>920.809998</td>\n",
              "      <td>1136.300049</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>...</td>\n",
              "      <td>0.011600</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.023354</td>\n",
              "      <td>0.047905</td>\n",
              "      <td>0.007615</td>\n",
              "      <td>0.033855</td>\n",
              "      <td>0.000814</td>\n",
              "      <td>0.015765</td>\n",
              "      <td>0.030267</td>\n",
              "      <td>0.010771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-07</th>\n",
              "      <td>242.968994</td>\n",
              "      <td>47.810001</td>\n",
              "      <td>977.909973</td>\n",
              "      <td>1149.000000</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>246.169998</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>977.909973</td>\n",
              "      <td>1147.599976</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>...</td>\n",
              "      <td>0.060164</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.012654</td>\n",
              "      <td>-0.014947</td>\n",
              "      <td>0.001917</td>\n",
              "      <td>0.035663</td>\n",
              "      <td>0.000794</td>\n",
              "      <td>0.015634</td>\n",
              "      <td>0.029762</td>\n",
              "      <td>0.010499</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-08</th>\n",
              "      <td>242.304001</td>\n",
              "      <td>49.430000</td>\n",
              "      <td>950.020020</td>\n",
              "      <td>1144.699951</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>243.074997</td>\n",
              "      <td>48.110001</td>\n",
              "      <td>950.020020</td>\n",
              "      <td>1142.699951</td>\n",
              "      <td>6.3461</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.028935</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.002741</td>\n",
              "      <td>0.033323</td>\n",
              "      <td>-0.003749</td>\n",
              "      <td>0.035445</td>\n",
              "      <td>0.000775</td>\n",
              "      <td>0.015268</td>\n",
              "      <td>0.029814</td>\n",
              "      <td>0.010301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-09</th>\n",
              "      <td>243.931000</td>\n",
              "      <td>49.630001</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1156.300049</td>\n",
              "      <td>6.3435</td>\n",
              "      <td>242.498001</td>\n",
              "      <td>49.689999</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1151.599976</td>\n",
              "      <td>6.3435</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009476</td>\n",
              "      <td>-0.000410</td>\n",
              "      <td>0.006692</td>\n",
              "      <td>0.004038</td>\n",
              "      <td>0.010083</td>\n",
              "      <td>0.034705</td>\n",
              "      <td>0.000761</td>\n",
              "      <td>0.014985</td>\n",
              "      <td>0.029128</td>\n",
              "      <td>0.010242</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-12</th>\n",
              "      <td>245.307999</td>\n",
              "      <td>47.099998</td>\n",
              "      <td>951.349976</td>\n",
              "      <td>1164.900024</td>\n",
              "      <td>6.3353</td>\n",
              "      <td>246.875000</td>\n",
              "      <td>49.509998</td>\n",
              "      <td>951.349976</td>\n",
              "      <td>1155.900024</td>\n",
              "      <td>6.3353</td>\n",
              "      <td>...</td>\n",
              "      <td>0.010875</td>\n",
              "      <td>-0.001294</td>\n",
              "      <td>0.005629</td>\n",
              "      <td>-0.052323</td>\n",
              "      <td>0.007410</td>\n",
              "      <td>0.034002</td>\n",
              "      <td>0.000784</td>\n",
              "      <td>0.014698</td>\n",
              "      <td>0.030602</td>\n",
              "      <td>0.010092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-13</th>\n",
              "      <td>249.507996</td>\n",
              "      <td>46.660000</td>\n",
              "      <td>934.750000</td>\n",
              "      <td>1165.800049</td>\n",
              "      <td>6.3130</td>\n",
              "      <td>245.199997</td>\n",
              "      <td>47.459999</td>\n",
              "      <td>934.750000</td>\n",
              "      <td>1163.500000</td>\n",
              "      <td>6.3130</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.017603</td>\n",
              "      <td>-0.003526</td>\n",
              "      <td>0.016976</td>\n",
              "      <td>-0.009386</td>\n",
              "      <td>0.000772</td>\n",
              "      <td>0.033501</td>\n",
              "      <td>0.001023</td>\n",
              "      <td>0.014773</td>\n",
              "      <td>0.030035</td>\n",
              "      <td>0.009881</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-14</th>\n",
              "      <td>251.988998</td>\n",
              "      <td>46.639999</td>\n",
              "      <td>927.119995</td>\n",
              "      <td>1180.099976</td>\n",
              "      <td>6.3323</td>\n",
              "      <td>249.492996</td>\n",
              "      <td>46.689999</td>\n",
              "      <td>927.119995</td>\n",
              "      <td>1172.400024</td>\n",
              "      <td>6.3323</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.008196</td>\n",
              "      <td>0.003053</td>\n",
              "      <td>0.009894</td>\n",
              "      <td>-0.000429</td>\n",
              "      <td>0.012192</td>\n",
              "      <td>0.032870</td>\n",
              "      <td>0.001196</td>\n",
              "      <td>0.014579</td>\n",
              "      <td>0.029430</td>\n",
              "      <td>0.009903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-15</th>\n",
              "      <td>254.320007</td>\n",
              "      <td>46.380001</td>\n",
              "      <td>968.609985</td>\n",
              "      <td>1187.900024</td>\n",
              "      <td>6.3377</td>\n",
              "      <td>252.106995</td>\n",
              "      <td>46.279999</td>\n",
              "      <td>968.609985</td>\n",
              "      <td>1184.199951</td>\n",
              "      <td>6.3377</td>\n",
              "      <td>...</td>\n",
              "      <td>0.043779</td>\n",
              "      <td>0.000852</td>\n",
              "      <td>0.009208</td>\n",
              "      <td>-0.005590</td>\n",
              "      <td>0.006588</td>\n",
              "      <td>0.033344</td>\n",
              "      <td>0.001188</td>\n",
              "      <td>0.014375</td>\n",
              "      <td>0.028886</td>\n",
              "      <td>0.009751</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-16</th>\n",
              "      <td>262.868988</td>\n",
              "      <td>47.259998</td>\n",
              "      <td>969.270020</td>\n",
              "      <td>1183.599976</td>\n",
              "      <td>6.3362</td>\n",
              "      <td>254.296005</td>\n",
              "      <td>46.869999</td>\n",
              "      <td>969.270020</td>\n",
              "      <td>1182.500000</td>\n",
              "      <td>6.3362</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000681</td>\n",
              "      <td>-0.000237</td>\n",
              "      <td>0.033062</td>\n",
              "      <td>0.018796</td>\n",
              "      <td>-0.003626</td>\n",
              "      <td>0.032722</td>\n",
              "      <td>0.001166</td>\n",
              "      <td>0.015342</td>\n",
              "      <td>0.028555</td>\n",
              "      <td>0.009632</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-19</th>\n",
              "      <td>263.437012</td>\n",
              "      <td>45.889999</td>\n",
              "      <td>958.650024</td>\n",
              "      <td>1173.300049</td>\n",
              "      <td>6.3426</td>\n",
              "      <td>261.860992</td>\n",
              "      <td>47.270000</td>\n",
              "      <td>958.650024</td>\n",
              "      <td>1176.500000</td>\n",
              "      <td>6.3426</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.011017</td>\n",
              "      <td>0.001010</td>\n",
              "      <td>0.002159</td>\n",
              "      <td>-0.029417</td>\n",
              "      <td>-0.008740</td>\n",
              "      <td>0.032222</td>\n",
              "      <td>0.001164</td>\n",
              "      <td>0.015066</td>\n",
              "      <td>0.028602</td>\n",
              "      <td>0.009665</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-20</th>\n",
              "      <td>269.463013</td>\n",
              "      <td>45.549999</td>\n",
              "      <td>977.909973</td>\n",
              "      <td>1178.000000</td>\n",
              "      <td>6.3501</td>\n",
              "      <td>263.571991</td>\n",
              "      <td>46.250000</td>\n",
              "      <td>977.909973</td>\n",
              "      <td>1168.699951</td>\n",
              "      <td>6.3501</td>\n",
              "      <td>...</td>\n",
              "      <td>0.019892</td>\n",
              "      <td>0.001182</td>\n",
              "      <td>0.022617</td>\n",
              "      <td>-0.007437</td>\n",
              "      <td>0.003998</td>\n",
              "      <td>0.031842</td>\n",
              "      <td>0.001167</td>\n",
              "      <td>0.015250</td>\n",
              "      <td>0.028141</td>\n",
              "      <td>0.009507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-21</th>\n",
              "      <td>266.272003</td>\n",
              "      <td>45.200001</td>\n",
              "      <td>972.260010</td>\n",
              "      <td>1167.599976</td>\n",
              "      <td>6.3384</td>\n",
              "      <td>269.306000</td>\n",
              "      <td>45.880001</td>\n",
              "      <td>972.260010</td>\n",
              "      <td>1175.900024</td>\n",
              "      <td>6.3384</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.005794</td>\n",
              "      <td>-0.001844</td>\n",
              "      <td>-0.011913</td>\n",
              "      <td>-0.007714</td>\n",
              "      <td>-0.008868</td>\n",
              "      <td>0.031850</td>\n",
              "      <td>0.001211</td>\n",
              "      <td>0.014750</td>\n",
              "      <td>0.027208</td>\n",
              "      <td>0.009112</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-22</th>\n",
              "      <td>274.023010</td>\n",
              "      <td>45.380001</td>\n",
              "      <td>979.900024</td>\n",
              "      <td>1166.599976</td>\n",
              "      <td>6.3393</td>\n",
              "      <td>266.496002</td>\n",
              "      <td>45.270000</td>\n",
              "      <td>979.900024</td>\n",
              "      <td>1166.199951</td>\n",
              "      <td>6.3393</td>\n",
              "      <td>...</td>\n",
              "      <td>0.007827</td>\n",
              "      <td>0.000142</td>\n",
              "      <td>0.028694</td>\n",
              "      <td>0.003974</td>\n",
              "      <td>-0.000857</td>\n",
              "      <td>0.031416</td>\n",
              "      <td>0.001166</td>\n",
              "      <td>0.015443</td>\n",
              "      <td>0.026205</td>\n",
              "      <td>0.009082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-23</th>\n",
              "      <td>276.496002</td>\n",
              "      <td>44.599998</td>\n",
              "      <td>980.559998</td>\n",
              "      <td>1163.300049</td>\n",
              "      <td>6.3480</td>\n",
              "      <td>273.648987</td>\n",
              "      <td>45.439999</td>\n",
              "      <td>980.559998</td>\n",
              "      <td>1166.199951</td>\n",
              "      <td>6.3480</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000673</td>\n",
              "      <td>0.001371</td>\n",
              "      <td>0.008984</td>\n",
              "      <td>-0.017338</td>\n",
              "      <td>-0.002833</td>\n",
              "      <td>0.031393</td>\n",
              "      <td>0.001199</td>\n",
              "      <td>0.015459</td>\n",
              "      <td>0.025877</td>\n",
              "      <td>0.009024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-26</th>\n",
              "      <td>285.299988</td>\n",
              "      <td>43.980000</td>\n",
              "      <td>985.869995</td>\n",
              "      <td>1167.000000</td>\n",
              "      <td>6.3391</td>\n",
              "      <td>283.627991</td>\n",
              "      <td>44.740002</td>\n",
              "      <td>985.869995</td>\n",
              "      <td>1165.099976</td>\n",
              "      <td>6.3391</td>\n",
              "      <td>...</td>\n",
              "      <td>0.005401</td>\n",
              "      <td>-0.001403</td>\n",
              "      <td>0.031345</td>\n",
              "      <td>-0.013999</td>\n",
              "      <td>0.003176</td>\n",
              "      <td>0.031215</td>\n",
              "      <td>0.001221</td>\n",
              "      <td>0.013813</td>\n",
              "      <td>0.025873</td>\n",
              "      <td>0.009020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-27</th>\n",
              "      <td>293.787994</td>\n",
              "      <td>43.200001</td>\n",
              "      <td>1022.719971</td>\n",
              "      <td>1166.800049</td>\n",
              "      <td>6.3432</td>\n",
              "      <td>285.181000</td>\n",
              "      <td>43.779999</td>\n",
              "      <td>1022.719971</td>\n",
              "      <td>1164.500000</td>\n",
              "      <td>6.3432</td>\n",
              "      <td>...</td>\n",
              "      <td>0.036696</td>\n",
              "      <td>0.000647</td>\n",
              "      <td>0.029317</td>\n",
              "      <td>-0.017894</td>\n",
              "      <td>-0.000171</td>\n",
              "      <td>0.030399</td>\n",
              "      <td>0.001215</td>\n",
              "      <td>0.014304</td>\n",
              "      <td>0.025953</td>\n",
              "      <td>0.008953</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-28</th>\n",
              "      <td>304.618011</td>\n",
              "      <td>45.939999</td>\n",
              "      <td>1022.719971</td>\n",
              "      <td>1177.099976</td>\n",
              "      <td>6.3432</td>\n",
              "      <td>293.703003</td>\n",
              "      <td>43.439999</td>\n",
              "      <td>1022.719971</td>\n",
              "      <td>1175.099976</td>\n",
              "      <td>6.3432</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.036200</td>\n",
              "      <td>0.061496</td>\n",
              "      <td>0.008789</td>\n",
              "      <td>0.030332</td>\n",
              "      <td>0.001213</td>\n",
              "      <td>0.014984</td>\n",
              "      <td>0.026437</td>\n",
              "      <td>0.008716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-29</th>\n",
              "      <td>313.855011</td>\n",
              "      <td>46.060001</td>\n",
              "      <td>1018.070007</td>\n",
              "      <td>1147.199951</td>\n",
              "      <td>6.3493</td>\n",
              "      <td>304.324005</td>\n",
              "      <td>46.060001</td>\n",
              "      <td>1018.070007</td>\n",
              "      <td>1158.000000</td>\n",
              "      <td>6.3493</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.004557</td>\n",
              "      <td>0.000961</td>\n",
              "      <td>0.029873</td>\n",
              "      <td>0.002609</td>\n",
              "      <td>-0.025730</td>\n",
              "      <td>0.030318</td>\n",
              "      <td>0.001227</td>\n",
              "      <td>0.015393</td>\n",
              "      <td>0.026427</td>\n",
              "      <td>0.010014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-10-30</th>\n",
              "      <td>328.015015</td>\n",
              "      <td>46.590000</td>\n",
              "      <td>972.929993</td>\n",
              "      <td>1141.500000</td>\n",
              "      <td>6.3467</td>\n",
              "      <td>313.942993</td>\n",
              "      <td>45.740002</td>\n",
              "      <td>972.929993</td>\n",
              "      <td>1147.500000</td>\n",
              "      <td>6.3467</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.045352</td>\n",
              "      <td>-0.000410</td>\n",
              "      <td>0.044128</td>\n",
              "      <td>0.011441</td>\n",
              "      <td>-0.004981</td>\n",
              "      <td>0.030070</td>\n",
              "      <td>0.001222</td>\n",
              "      <td>0.016632</td>\n",
              "      <td>0.024956</td>\n",
              "      <td>0.009490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-11-02</th>\n",
              "      <td>361.188995</td>\n",
              "      <td>46.139999</td>\n",
              "      <td>1026.040039</td>\n",
              "      <td>1135.800049</td>\n",
              "      <td>6.3081</td>\n",
              "      <td>325.941986</td>\n",
              "      <td>46.430000</td>\n",
              "      <td>1026.040039</td>\n",
              "      <td>1137.900024</td>\n",
              "      <td>6.3081</td>\n",
              "      <td>...</td>\n",
              "      <td>0.053150</td>\n",
              "      <td>-0.006100</td>\n",
              "      <td>0.096342</td>\n",
              "      <td>-0.009706</td>\n",
              "      <td>-0.005006</td>\n",
              "      <td>0.030992</td>\n",
              "      <td>0.001645</td>\n",
              "      <td>0.022086</td>\n",
              "      <td>0.023662</td>\n",
              "      <td>0.009500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>40 rows × 40 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d34ab87b-a325-494d-a09b-d551f3e154fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d34ab87b-a325-494d-a09b-d551f3e154fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d34ab87b-a325-494d-a09b-d551f3e154fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d9b951e-c119-4407-905b-36d695febf5d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d9b951e-c119-4407-905b-36d695febf5d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d9b951e-c119-4407-905b-36d695febf5d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Assumptions for Data Calculations:\n",
            "- 20-day Simple Moving Average: For the first 20 rows, the rolling average window starts from 1 and increases up to the current row number. After the first 20 rows, a fixed 20-day window is used.\n",
            "- 30-day Rolling Volatility: For the first 29 rows, the rolling volatility window starts from 1 and increases up to the current row number. After the first 29 rows, a fixed 30-day window is used.\n",
            "Google Drive is already mounted.\n",
            "File ID: 1UAeHF_wGRUwSWDtlDerRlgJv1cdny_Za\n",
            "Data exported to shared drive folder: 1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA\n",
            "[info] Using 'df_merged' as the anchor table\n",
            "[info] Trends date range: 2015-09-08 → 2025-09-05\n",
            "Mounted at /content/drive\n",
            "\n",
            "=== Keyword: USD ===\n",
            "[skip] Found existing file in Google Drive: trends_usd_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: gold price ===\n",
            "[skip] Found existing file in Google Drive: trends_gold_price_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: bitcoin ===\n",
            "[skip] Found existing file in Google Drive: trends_bitcoin_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: oil price ===\n",
            "[skip] Found existing file in Google Drive: trends_oil_price_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: Chinese yuan ===\n",
            "[skip] Found existing file in Google Drive: trends_chinese_yuan_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: inflation ===\n",
            "[skip] Found existing file in Google Drive: trends_inflation_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: interest rates ===\n",
            "[skip] Found existing file in Google Drive: trends_interest_rates_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: stock market ===\n",
            "[skip] Found existing file in Google Drive: trends_stock_market_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: recession ===\n",
            "[skip] Found existing file in Google Drive: trends_recession_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: economic growth ===\n",
            "[skip] Found existing file in Google Drive: trends_economic_growth_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: currency exchange ===\n",
            "[skip] Found existing file in Google Drive: trends_currency_exchange_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: commodity prices ===\n",
            "[skip] Found existing file in Google Drive: trends_commodity_prices_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: treasury bonds ===\n",
            "[skip] Found existing file in Google Drive: trends_treasury_bonds_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: central bank ===\n",
            "[skip] Found existing file in Google Drive: trends_central_bank_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: consumer spending ===\n",
            "[skip] Found existing file in Google Drive: trends_consumer_spending_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: intervention ===\n",
            "[skip] Found existing file in Google Drive: trends_intervention_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: gamble ===\n",
            "[skip] Found existing file in Google Drive: trends_gamble_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: gold ===\n",
            "[skip] Found existing file in Google Drive: trends_gold_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: luxury ===\n",
            "[skip] Found existing file in Google Drive: trends_luxury_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: ruin ===\n",
            "[skip] Found existing file in Google Drive: trends_ruin_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: associate ===\n",
            "[skip] Found existing file in Google Drive: trends_associate_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: cooperative ===\n",
            "[skip] Found existing file in Google Drive: trends_cooperative_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: pollution ===\n",
            "[skip] Found existing file in Google Drive: trends_pollution_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: success ===\n",
            "[skip] Found existing file in Google Drive: trends_success_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: gift ===\n",
            "[skip] Found existing file in Google Drive: trends_gift_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: affluent ===\n",
            "[skip] Found existing file in Google Drive: trends_affluent_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: benevolence ===\n",
            "[skip] Found existing file in Google Drive: trends_benevolence_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: partnership ===\n",
            "[skip] Found existing file in Google Drive: trends_partnership_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: poor ===\n",
            "[skip] Found existing file in Google Drive: trends_poor_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: blackmail ===\n",
            "[skip] Found existing file in Google Drive: trends_blackmail_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: privileged ===\n",
            "[skip] Found existing file in Google Drive: trends_privileged_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: ghetto ===\n",
            "[skip] Found existing file in Google Drive: trends_ghetto_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: extravagant ===\n",
            "[skip] Found existing file in Google Drive: trends_extravagant_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: nobility ===\n",
            "[skip] Found existing file in Google Drive: trends_nobility_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: cheap ===\n",
            "[skip] Found existing file in Google Drive: trends_cheap_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: entrepreneurial, ===\n",
            "[skip] Found existing file in Google Drive: trends_entrepreneurial_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: jobless ===\n",
            "[skip] Found existing file in Google Drive: trends_jobless_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: shortage ===\n",
            "[skip] Found existing file in Google Drive: trends_shortage_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: fellowship ===\n",
            "[skip] Found existing file in Google Drive: trends_fellowship_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: inexpensive ===\n",
            "[skip] Found existing file in Google Drive: trends_inexpensive_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: valuable ===\n",
            "[skip] Found existing file in Google Drive: trends_valuable_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: bargain ===\n",
            "[skip] Found existing file in Google Drive: trends_bargain_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: colony ===\n",
            "[skip] Found existing file in Google Drive: trends_colony_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: liquidation ===\n",
            "[skip] Found existing file in Google Drive: trends_liquidation_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: debt ===\n",
            "[skip] Found existing file in Google Drive: trends_debt_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: color ===\n",
            "[skip] Found existing file in Google Drive: trends_color_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: restaurant ===\n",
            "[skip] Found existing file in Google Drive: trends_restaurant_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: portfolio ===\n",
            "[skip] Found existing file in Google Drive: trends_portfolio_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: housing ===\n",
            "[skip] Found existing file in Google Drive: trends_housing_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: dow jones ===\n",
            "[skip] Found existing file in Google Drive: trends_dow_jones_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: revenue ===\n",
            "[skip] Found existing file in Google Drive: trends_revenue_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: credit ===\n",
            "[skip] Found existing file in Google Drive: trends_credit_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: unemployment ===\n",
            "[skip] Found existing file in Google Drive: trends_unemployment_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: money ===\n",
            "[skip] Found existing file in Google Drive: trends_money_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: religion ===\n",
            "[skip] Found existing file in Google Drive: trends_religion_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: cancer ===\n",
            "[skip] Found existing file in Google Drive: trends_cancer_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: growth ===\n",
            "[skip] Found existing file in Google Drive: trends_growth_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: investment ===\n",
            "[skip] Found existing file in Google Drive: trends_investment_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: hedge ===\n",
            "[skip] Found existing file in Google Drive: trends_hedge_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: marriage ===\n",
            "[skip] Found existing file in Google Drive: trends_marriage_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: bonds ===\n",
            "[skip] Found existing file in Google Drive: trends_bonds_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: cash ===\n",
            "[skip] Found existing file in Google Drive: trends_cash_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: office ===\n",
            "[skip] Found existing file in Google Drive: trends_office_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: car ===\n",
            "[skip] Found existing file in Google Drive: trends_car_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: nasdaq ===\n",
            "[skip] Found existing file in Google Drive: trends_nasdaq_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: gains ===\n",
            "[skip] Found existing file in Google Drive: trends_gains_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: finance ===\n",
            "[skip] Found existing file in Google Drive: trends_finance_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: sell ===\n",
            "[skip] Found existing file in Google Drive: trends_sell_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: metals ===\n",
            "[skip] Found existing file in Google Drive: trends_metals_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: travel ===\n",
            "[skip] Found existing file in Google Drive: trends_travel_daily.csv\n",
            "Download 100%.\n",
            "\n",
            "=== Keyword: chance ===\n",
            "[skip] Found existing file in Google Drive: trends_chance_daily.csv\n",
            "Download 100%.\n",
            "[ok] saved combined trends: (3651, 71) → Google Drive File ID: 1oNWlvWbYQ-RCLHWtd3SiLfCVkA8hQP1V\n",
            "Merged Data File ID: 1Ohs3IEN4lXDoNCp__WFTtobsHr9i6Ybt\n",
            "Merged Data exported to shared drive folder: 1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA\n",
            "Mounted at /content/drive\n",
            "Attempting to load trends_all_keywords_daily.csv from Google Drive folder: 1nYgH5q4WSvaNxFMIMHb72m3SWLzuwjDH\n",
            "Found file with ID: 1oNWlvWbYQ-RCLHWtd3SiLfCVkA8hQP1V\n",
            "Download 100%.\n",
            "Successfully loaded trends_all_keywords_daily.csv. Shape: (3651, 71)\n",
            "\n",
            "Attempting to load merged_financial_trends_data_2025-09-06.csv from Google Drive folder: 1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA\n",
            "Found file with ID: 1Ohs3IEN4lXDoNCp__WFTtobsHr9i6Ybt\n",
            "Download 100%.\n",
            "Successfully loaded merged_financial_trends_data_2025-09-06.csv. Shape: (2609, 111)\n",
            "\n",
            "Successfully merged dataframes.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            BTC-USD Close  CL=F Close   DXY Close   GC=F Close  \\\n",
              "Date                                                             \n",
              "2015-09-08     243.606995   45.939999  930.440002  1120.400024   \n",
              "2015-09-09     238.167999   44.150002  938.400024  1102.199951   \n",
              "2015-09-10     238.477005   45.919998  913.510010  1109.500000   \n",
              "2015-09-11     240.106995   44.630001  922.140015  1103.500000   \n",
              "2015-09-14     230.643997   44.000000  941.059998  1107.699951   \n",
              "\n",
              "            USDCNY=X Close  BTC-USD Open  CL=F Open    DXY Open    GC=F Open  \\\n",
              "Date                                                                           \n",
              "2015-09-08          6.3559    239.845993  45.820000  930.440002  1119.800049   \n",
              "2015-09-09          6.3572    243.414993  45.790001  938.400024  1123.500000   \n",
              "2015-09-10          6.3678    238.335999  44.160000  913.510010  1107.300049   \n",
              "2015-09-11          6.3672    238.328995  45.709999  922.140015  1110.800049   \n",
              "2015-09-14          6.3650    230.608994  44.779999  941.059998  1107.800049   \n",
              "\n",
              "            USDCNY=X Open  ...  cash_trend  office_trend  car_trend  \\\n",
              "Date                       ...                                        \n",
              "2015-09-08         6.3559  ...          91            97         88   \n",
              "2015-09-09         6.3572  ...          92            91         86   \n",
              "2015-09-10         6.3678  ...          90            93         88   \n",
              "2015-09-11         6.3672  ...          90            86         91   \n",
              "2015-09-14         6.3650  ...          87            98         89   \n",
              "\n",
              "            nasdaq_trend  gains_trend  finance_trend  sell_trend  \\\n",
              "Date                                                               \n",
              "2015-09-08            75           76             97          87   \n",
              "2015-09-09            77           76             93          85   \n",
              "2015-09-10            74           76             91          82   \n",
              "2015-09-11            66           66             90          84   \n",
              "2015-09-14            67           74             92          89   \n",
              "\n",
              "            metals_trend  travel_trend  chance_trend  \n",
              "Date                                                  \n",
              "2015-09-08            88            93            58  \n",
              "2015-09-09            85            89            60  \n",
              "2015-09-10            84            87            58  \n",
              "2015-09-11            79            84            60  \n",
              "2015-09-14            93            95            60  \n",
              "\n",
              "[5 rows x 111 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17a44640-ca3a-456e-8265-718e1b7f58c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD Close</th>\n",
              "      <th>CL=F Close</th>\n",
              "      <th>DXY Close</th>\n",
              "      <th>GC=F Close</th>\n",
              "      <th>USDCNY=X Close</th>\n",
              "      <th>BTC-USD Open</th>\n",
              "      <th>CL=F Open</th>\n",
              "      <th>DXY Open</th>\n",
              "      <th>GC=F Open</th>\n",
              "      <th>USDCNY=X Open</th>\n",
              "      <th>...</th>\n",
              "      <th>cash_trend</th>\n",
              "      <th>office_trend</th>\n",
              "      <th>car_trend</th>\n",
              "      <th>nasdaq_trend</th>\n",
              "      <th>gains_trend</th>\n",
              "      <th>finance_trend</th>\n",
              "      <th>sell_trend</th>\n",
              "      <th>metals_trend</th>\n",
              "      <th>travel_trend</th>\n",
              "      <th>chance_trend</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-09-08</th>\n",
              "      <td>243.606995</td>\n",
              "      <td>45.939999</td>\n",
              "      <td>930.440002</td>\n",
              "      <td>1120.400024</td>\n",
              "      <td>6.3559</td>\n",
              "      <td>239.845993</td>\n",
              "      <td>45.820000</td>\n",
              "      <td>930.440002</td>\n",
              "      <td>1119.800049</td>\n",
              "      <td>6.3559</td>\n",
              "      <td>...</td>\n",
              "      <td>91</td>\n",
              "      <td>97</td>\n",
              "      <td>88</td>\n",
              "      <td>75</td>\n",
              "      <td>76</td>\n",
              "      <td>97</td>\n",
              "      <td>87</td>\n",
              "      <td>88</td>\n",
              "      <td>93</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-09</th>\n",
              "      <td>238.167999</td>\n",
              "      <td>44.150002</td>\n",
              "      <td>938.400024</td>\n",
              "      <td>1102.199951</td>\n",
              "      <td>6.3572</td>\n",
              "      <td>243.414993</td>\n",
              "      <td>45.790001</td>\n",
              "      <td>938.400024</td>\n",
              "      <td>1123.500000</td>\n",
              "      <td>6.3572</td>\n",
              "      <td>...</td>\n",
              "      <td>92</td>\n",
              "      <td>91</td>\n",
              "      <td>86</td>\n",
              "      <td>77</td>\n",
              "      <td>76</td>\n",
              "      <td>93</td>\n",
              "      <td>85</td>\n",
              "      <td>85</td>\n",
              "      <td>89</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-10</th>\n",
              "      <td>238.477005</td>\n",
              "      <td>45.919998</td>\n",
              "      <td>913.510010</td>\n",
              "      <td>1109.500000</td>\n",
              "      <td>6.3678</td>\n",
              "      <td>238.335999</td>\n",
              "      <td>44.160000</td>\n",
              "      <td>913.510010</td>\n",
              "      <td>1107.300049</td>\n",
              "      <td>6.3678</td>\n",
              "      <td>...</td>\n",
              "      <td>90</td>\n",
              "      <td>93</td>\n",
              "      <td>88</td>\n",
              "      <td>74</td>\n",
              "      <td>76</td>\n",
              "      <td>91</td>\n",
              "      <td>82</td>\n",
              "      <td>84</td>\n",
              "      <td>87</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-11</th>\n",
              "      <td>240.106995</td>\n",
              "      <td>44.630001</td>\n",
              "      <td>922.140015</td>\n",
              "      <td>1103.500000</td>\n",
              "      <td>6.3672</td>\n",
              "      <td>238.328995</td>\n",
              "      <td>45.709999</td>\n",
              "      <td>922.140015</td>\n",
              "      <td>1110.800049</td>\n",
              "      <td>6.3672</td>\n",
              "      <td>...</td>\n",
              "      <td>90</td>\n",
              "      <td>86</td>\n",
              "      <td>91</td>\n",
              "      <td>66</td>\n",
              "      <td>66</td>\n",
              "      <td>90</td>\n",
              "      <td>84</td>\n",
              "      <td>79</td>\n",
              "      <td>84</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-14</th>\n",
              "      <td>230.643997</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1107.699951</td>\n",
              "      <td>6.3650</td>\n",
              "      <td>230.608994</td>\n",
              "      <td>44.779999</td>\n",
              "      <td>941.059998</td>\n",
              "      <td>1107.800049</td>\n",
              "      <td>6.3650</td>\n",
              "      <td>...</td>\n",
              "      <td>87</td>\n",
              "      <td>98</td>\n",
              "      <td>89</td>\n",
              "      <td>67</td>\n",
              "      <td>74</td>\n",
              "      <td>92</td>\n",
              "      <td>89</td>\n",
              "      <td>93</td>\n",
              "      <td>95</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 111 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17a44640-ca3a-456e-8265-718e1b7f58c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17a44640-ca3a-456e-8265-718e1b7f58c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17a44640-ca3a-456e-8265-718e1b7f58c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6877f931-0987-4561-825d-f59e70ed231f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6877f931-0987-4561-825d-f59e70ed231f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6877f931-0987-4561-825d-f59e70ed231f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Created BTC-USD specific dataframe including all trends.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            BTC-USD Log Returns  usd_trend  gold_price_trend  bitcoin_trend  \\\n",
              "Date                                                                          \n",
              "2015-09-08                  NaN         93                52             30   \n",
              "2015-09-09            -0.022580         92                50             30   \n",
              "2015-09-10             0.001297         91                59             28   \n",
              "2015-09-11             0.006812         83                52             29   \n",
              "2015-09-14            -0.040209         85                51             31   \n",
              "\n",
              "            oil_price_trend  chinese_yuan_trend  inflation_trend  \\\n",
              "Date                                                               \n",
              "2015-09-08               33                  44               74   \n",
              "2015-09-09               32                  45               75   \n",
              "2015-09-10               33                  50               74   \n",
              "2015-09-11               31                  41               66   \n",
              "2015-09-14               32                  49               79   \n",
              "\n",
              "            interest_rates_trend  stock_market_trend  recession_trend  ...  \\\n",
              "Date                                                                   ...   \n",
              "2015-09-08                    31                  51               60  ...   \n",
              "2015-09-09                    34                  48               66  ...   \n",
              "2015-09-10                    32                  43               64  ...   \n",
              "2015-09-11                    31                  41               66  ...   \n",
              "2015-09-14                    37                  50               65  ...   \n",
              "\n",
              "            cash_trend  office_trend  car_trend  nasdaq_trend  gains_trend  \\\n",
              "Date                                                                         \n",
              "2015-09-08          91            97         88            75           76   \n",
              "2015-09-09          92            91         86            77           76   \n",
              "2015-09-10          90            93         88            74           76   \n",
              "2015-09-11          90            86         91            66           66   \n",
              "2015-09-14          87            98         89            67           74   \n",
              "\n",
              "            finance_trend  sell_trend  metals_trend  travel_trend  \\\n",
              "Date                                                                \n",
              "2015-09-08             97          87            88            93   \n",
              "2015-09-09             93          85            85            89   \n",
              "2015-09-10             91          82            84            87   \n",
              "2015-09-11             90          84            79            84   \n",
              "2015-09-14             92          89            93            95   \n",
              "\n",
              "            chance_trend  \n",
              "Date                      \n",
              "2015-09-08            58  \n",
              "2015-09-09            60  \n",
              "2015-09-10            58  \n",
              "2015-09-11            60  \n",
              "2015-09-14            60  \n",
              "\n",
              "[5 rows x 72 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b058cbe9-f4c3-4361-82cd-67fd6a30eaf9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD Log Returns</th>\n",
              "      <th>usd_trend</th>\n",
              "      <th>gold_price_trend</th>\n",
              "      <th>bitcoin_trend</th>\n",
              "      <th>oil_price_trend</th>\n",
              "      <th>chinese_yuan_trend</th>\n",
              "      <th>inflation_trend</th>\n",
              "      <th>interest_rates_trend</th>\n",
              "      <th>stock_market_trend</th>\n",
              "      <th>recession_trend</th>\n",
              "      <th>...</th>\n",
              "      <th>cash_trend</th>\n",
              "      <th>office_trend</th>\n",
              "      <th>car_trend</th>\n",
              "      <th>nasdaq_trend</th>\n",
              "      <th>gains_trend</th>\n",
              "      <th>finance_trend</th>\n",
              "      <th>sell_trend</th>\n",
              "      <th>metals_trend</th>\n",
              "      <th>travel_trend</th>\n",
              "      <th>chance_trend</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-09-08</th>\n",
              "      <td>NaN</td>\n",
              "      <td>93</td>\n",
              "      <td>52</td>\n",
              "      <td>30</td>\n",
              "      <td>33</td>\n",
              "      <td>44</td>\n",
              "      <td>74</td>\n",
              "      <td>31</td>\n",
              "      <td>51</td>\n",
              "      <td>60</td>\n",
              "      <td>...</td>\n",
              "      <td>91</td>\n",
              "      <td>97</td>\n",
              "      <td>88</td>\n",
              "      <td>75</td>\n",
              "      <td>76</td>\n",
              "      <td>97</td>\n",
              "      <td>87</td>\n",
              "      <td>88</td>\n",
              "      <td>93</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-09</th>\n",
              "      <td>-0.022580</td>\n",
              "      <td>92</td>\n",
              "      <td>50</td>\n",
              "      <td>30</td>\n",
              "      <td>32</td>\n",
              "      <td>45</td>\n",
              "      <td>75</td>\n",
              "      <td>34</td>\n",
              "      <td>48</td>\n",
              "      <td>66</td>\n",
              "      <td>...</td>\n",
              "      <td>92</td>\n",
              "      <td>91</td>\n",
              "      <td>86</td>\n",
              "      <td>77</td>\n",
              "      <td>76</td>\n",
              "      <td>93</td>\n",
              "      <td>85</td>\n",
              "      <td>85</td>\n",
              "      <td>89</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-10</th>\n",
              "      <td>0.001297</td>\n",
              "      <td>91</td>\n",
              "      <td>59</td>\n",
              "      <td>28</td>\n",
              "      <td>33</td>\n",
              "      <td>50</td>\n",
              "      <td>74</td>\n",
              "      <td>32</td>\n",
              "      <td>43</td>\n",
              "      <td>64</td>\n",
              "      <td>...</td>\n",
              "      <td>90</td>\n",
              "      <td>93</td>\n",
              "      <td>88</td>\n",
              "      <td>74</td>\n",
              "      <td>76</td>\n",
              "      <td>91</td>\n",
              "      <td>82</td>\n",
              "      <td>84</td>\n",
              "      <td>87</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-11</th>\n",
              "      <td>0.006812</td>\n",
              "      <td>83</td>\n",
              "      <td>52</td>\n",
              "      <td>29</td>\n",
              "      <td>31</td>\n",
              "      <td>41</td>\n",
              "      <td>66</td>\n",
              "      <td>31</td>\n",
              "      <td>41</td>\n",
              "      <td>66</td>\n",
              "      <td>...</td>\n",
              "      <td>90</td>\n",
              "      <td>86</td>\n",
              "      <td>91</td>\n",
              "      <td>66</td>\n",
              "      <td>66</td>\n",
              "      <td>90</td>\n",
              "      <td>84</td>\n",
              "      <td>79</td>\n",
              "      <td>84</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-09-14</th>\n",
              "      <td>-0.040209</td>\n",
              "      <td>85</td>\n",
              "      <td>51</td>\n",
              "      <td>31</td>\n",
              "      <td>32</td>\n",
              "      <td>49</td>\n",
              "      <td>79</td>\n",
              "      <td>37</td>\n",
              "      <td>50</td>\n",
              "      <td>65</td>\n",
              "      <td>...</td>\n",
              "      <td>87</td>\n",
              "      <td>98</td>\n",
              "      <td>89</td>\n",
              "      <td>67</td>\n",
              "      <td>74</td>\n",
              "      <td>92</td>\n",
              "      <td>89</td>\n",
              "      <td>93</td>\n",
              "      <td>95</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 72 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b058cbe9-f4c3-4361-82cd-67fd6a30eaf9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b058cbe9-f4c3-4361-82cd-67fd6a30eaf9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b058cbe9-f4c3-4361-82cd-67fd6a30eaf9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ec3594bd-8a6f-4e44-a870-51ee8ccfd7e0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec3594bd-8a6f-4e44-a870-51ee8ccfd7e0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ec3594bd-8a6f-4e44-a870-51ee8ccfd7e0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Shape of the BTC-USD dataframe after dropping rows with NaN for correlation:\n",
            "(2479, 72)\n",
            "\n",
            "Correlation of 'BTC-USD Log Returns' with Keyword Trends:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "nobility_trend           0.049034\n",
              "entrepreneurial_trend    0.041700\n",
              "unemployment_trend       0.040674\n",
              "bargain_trend            0.039959\n",
              "marriage_trend           0.039935\n",
              "                           ...   \n",
              "colony_trend            -0.035510\n",
              "cash_trend              -0.038737\n",
              "chinese_yuan_trend      -0.040197\n",
              "bitcoin_trend           -0.040273\n",
              "extravagant_trend       -0.043325\n",
              "Name: BTC-USD Log Returns, Length: 71, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD Log Returns</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>nobility_trend</th>\n",
              "      <td>0.049034</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>entrepreneurial_trend</th>\n",
              "      <td>0.041700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unemployment_trend</th>\n",
              "      <td>0.040674</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bargain_trend</th>\n",
              "      <td>0.039959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>marriage_trend</th>\n",
              "      <td>0.039935</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>colony_trend</th>\n",
              "      <td>-0.035510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cash_trend</th>\n",
              "      <td>-0.038737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chinese_yuan_trend</th>\n",
              "      <td>-0.040197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bitcoin_trend</th>\n",
              "      <td>-0.040273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>extravagant_trend</th>\n",
              "      <td>-0.043325</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>71 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Linear Regression (Example with 'bitcoin_trend') ---\n",
            "                             OLS Regression Results                            \n",
            "===============================================================================\n",
            "Dep. Variable:     BTC-USD Log Returns   R-squared:                       0.002\n",
            "Model:                             OLS   Adj. R-squared:                  0.001\n",
            "Method:                  Least Squares   F-statistic:                     4.024\n",
            "Date:                 Sat, 06 Sep 2025   Prob (F-statistic):             0.0450\n",
            "Time:                         10:32:48   Log-Likelihood:                 4340.8\n",
            "No. Observations:                 2479   AIC:                            -8678.\n",
            "Df Residuals:                     2477   BIC:                            -8666.\n",
            "Df Model:                            1                                         \n",
            "Covariance Type:             nonrobust                                         \n",
            "=================================================================================\n",
            "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
            "---------------------------------------------------------------------------------\n",
            "const             0.0061      0.002      2.906      0.004       0.002       0.010\n",
            "bitcoin_trend -9.684e-05   4.83e-05     -2.006      0.045      -0.000   -2.18e-06\n",
            "==============================================================================\n",
            "Omnibus:                      543.910   Durbin-Watson:                   2.026\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            10314.504\n",
            "Skew:                          -0.528   Prob(JB):                         0.00\n",
            "Kurtosis:                      12.937   Cond. No.                         109.\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "\n",
            "--- Lagged Correlations ---\n",
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'usd_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.022072\n",
              "Lag 2   -0.010592\n",
              "Lag 3   -0.006573\n",
              "Lag 4   -0.015298\n",
              "Lag 5   -0.016436\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.022072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.010592</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.006573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.015298</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.016436</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'gold_price_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.006754\n",
              "Lag 2    0.004668\n",
              "Lag 3   -0.000275\n",
              "Lag 4   -0.024488\n",
              "Lag 5   -0.025680\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.006754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.004668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.000275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.024488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.025680</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'bitcoin_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.043114\n",
              "Lag 2   -0.043496\n",
              "Lag 3   -0.041577\n",
              "Lag 4   -0.049753\n",
              "Lag 5   -0.040549\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.043114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.043496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.041577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.049753</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.040549</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'oil_price_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.036154\n",
              "Lag 2    0.037473\n",
              "Lag 3    0.018522\n",
              "Lag 4    0.030557\n",
              "Lag 5    0.035684\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.036154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.037473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.018522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.030557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.035684</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'chinese_yuan_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.041011\n",
              "Lag 2   -0.045413\n",
              "Lag 3   -0.049518\n",
              "Lag 4   -0.044787\n",
              "Lag 5   -0.046947\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.041011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.045413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.049518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.044787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.046947</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'inflation_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.006249\n",
              "Lag 2    0.025613\n",
              "Lag 3    0.028049\n",
              "Lag 4    0.021623\n",
              "Lag 5    0.016513\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.006249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.025613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.028049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.021623</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.016513</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'interest_rates_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.006358\n",
              "Lag 2    0.014737\n",
              "Lag 3    0.016481\n",
              "Lag 4   -0.003785\n",
              "Lag 5    0.007553\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.006358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.014737</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.016481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.003785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007553</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'stock_market_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.002937\n",
              "Lag 2   -0.001561\n",
              "Lag 3   -0.002978\n",
              "Lag 4    0.011302\n",
              "Lag 5   -0.003029\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.002937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.001561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.002978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.011302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.003029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'recession_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.017921\n",
              "Lag 2   -0.008106\n",
              "Lag 3   -0.008195\n",
              "Lag 4   -0.023562\n",
              "Lag 5   -0.009810\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.017921</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.008106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.008195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.023562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.009810</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'economic_growth_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.003134\n",
              "Lag 2    0.009416\n",
              "Lag 3    0.017680\n",
              "Lag 4    0.023053\n",
              "Lag 5    0.016642\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.003134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.009416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.017680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.023053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.016642</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'currency_exchange_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.023781\n",
              "Lag 2   -0.019051\n",
              "Lag 3   -0.014613\n",
              "Lag 4   -0.016927\n",
              "Lag 5   -0.012843\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.023781</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.019051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.014613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.016927</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.012843</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'commodity_prices_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.016425\n",
              "Lag 2   -0.008692\n",
              "Lag 3   -0.009436\n",
              "Lag 4   -0.012553\n",
              "Lag 5    0.023841\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.016425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.008692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.009436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.012553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.023841</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'treasury_bonds_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.013405\n",
              "Lag 2    0.009416\n",
              "Lag 3   -0.002466\n",
              "Lag 4   -0.024991\n",
              "Lag 5   -0.007155\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.013405</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.009416</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.002466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.024991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.007155</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'central_bank_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.004322\n",
              "Lag 2    0.014866\n",
              "Lag 3    0.009422\n",
              "Lag 4    0.015677\n",
              "Lag 5    0.015282\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.004322</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.014866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.009422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.015677</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.015282</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'consumer_spending_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.003447\n",
              "Lag 2   -0.003170\n",
              "Lag 3    0.002134\n",
              "Lag 4   -0.000208\n",
              "Lag 5    0.004354\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.003447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.003170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.002134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.000208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.004354</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'intervention_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.015624\n",
              "Lag 2   -0.014355\n",
              "Lag 3    0.004929\n",
              "Lag 4    0.000541\n",
              "Lag 5   -0.003588\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.015624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.014355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.004929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.000541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.003588</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'gamble_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.007246\n",
              "Lag 2   -0.005220\n",
              "Lag 3    0.007268\n",
              "Lag 4    0.013167\n",
              "Lag 5    0.011419\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.007246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.005220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.007268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.013167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.011419</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'gold_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.013920\n",
              "Lag 2    0.012448\n",
              "Lag 3    0.008823\n",
              "Lag 4   -0.012546\n",
              "Lag 5   -0.003375\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.013920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.012448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.008823</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.012546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.003375</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'luxury_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.008977\n",
              "Lag 2   -0.004986\n",
              "Lag 3   -0.006552\n",
              "Lag 4   -0.000126\n",
              "Lag 5    0.010733\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.008977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.004986</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.006552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.000126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.010733</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'ruin_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.025875\n",
              "Lag 2   -0.035952\n",
              "Lag 3   -0.031466\n",
              "Lag 4   -0.020044\n",
              "Lag 5   -0.007278\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.025875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.035952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.031466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.020044</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.007278</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'associate_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.017913\n",
              "Lag 2   -0.006165\n",
              "Lag 3   -0.008550\n",
              "Lag 4   -0.002295\n",
              "Lag 5   -0.001555\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.017913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.006165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.008550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.002295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.001555</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'cooperative_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.005481\n",
              "Lag 2    0.003886\n",
              "Lag 3   -0.001004\n",
              "Lag 4    0.028685\n",
              "Lag 5    0.005626\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.005481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.003886</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.001004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.028685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.005626</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'pollution_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.008107\n",
              "Lag 2    0.010716\n",
              "Lag 3    0.018286\n",
              "Lag 4    0.025668\n",
              "Lag 5    0.023497\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.008107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.010716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.018286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.025668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.023497</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'success_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.009839\n",
              "Lag 2    0.005136\n",
              "Lag 3    0.006989\n",
              "Lag 4    0.017389\n",
              "Lag 5    0.015521\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.009839</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.005136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.006989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.017389</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.015521</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'gift_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.000536\n",
              "Lag 2   -0.004398\n",
              "Lag 3   -0.003083\n",
              "Lag 4   -0.008011\n",
              "Lag 5   -0.004889\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.000536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.004398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.003083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.008011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.004889</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'affluent_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.030441\n",
              "Lag 2   -0.015428\n",
              "Lag 3   -0.022120\n",
              "Lag 4   -0.006229\n",
              "Lag 5   -0.020421\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.030441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.015428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.022120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.006229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.020421</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'benevolence_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.013166\n",
              "Lag 2    0.010060\n",
              "Lag 3    0.001025\n",
              "Lag 4   -0.005211\n",
              "Lag 5   -0.012169\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.013166</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.010060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.001025</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.005211</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.012169</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'partnership_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.010870\n",
              "Lag 2    0.023143\n",
              "Lag 3    0.030504\n",
              "Lag 4    0.032189\n",
              "Lag 5    0.030725\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.010870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.023143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.030504</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.032189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.030725</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'poor_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.006157\n",
              "Lag 2    0.002436\n",
              "Lag 3    0.008795\n",
              "Lag 4    0.006043\n",
              "Lag 5    0.007528\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.006157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.002436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.008795</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.006043</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007528</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'blackmail_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.010120\n",
              "Lag 2   -0.013098\n",
              "Lag 3   -0.013429\n",
              "Lag 4   -0.007784\n",
              "Lag 5   -0.013949\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.010120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.013098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.013429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.007784</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.013949</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'privileged_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.009549\n",
              "Lag 2    0.005990\n",
              "Lag 3    0.018029\n",
              "Lag 4    0.012086\n",
              "Lag 5    0.011640\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.009549</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.005990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.018029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.012086</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.011640</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'ghetto_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.015517\n",
              "Lag 2   -0.011798\n",
              "Lag 3    0.003689\n",
              "Lag 4    0.000429\n",
              "Lag 5    0.007093\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.015517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.011798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.003689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.000429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007093</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'extravagant_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.032317\n",
              "Lag 2   -0.017739\n",
              "Lag 3   -0.026821\n",
              "Lag 4   -0.022856\n",
              "Lag 5   -0.004798\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.032317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.017739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.026821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.022856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.004798</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'nobility_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.037605\n",
              "Lag 2    0.022068\n",
              "Lag 3    0.032898\n",
              "Lag 4    0.035123\n",
              "Lag 5    0.028047\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.037605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.022068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.032898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.035123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.028047</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'cheap_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.001030\n",
              "Lag 2   -0.004879\n",
              "Lag 3    0.000618\n",
              "Lag 4    0.007827\n",
              "Lag 5    0.015083\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.001030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.004879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.000618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.007827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.015083</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'entrepreneurial_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.006215\n",
              "Lag 2    0.003304\n",
              "Lag 3    0.012939\n",
              "Lag 4    0.021862\n",
              "Lag 5    0.002446\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.006215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.003304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.012939</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.021862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.002446</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'jobless_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.013243\n",
              "Lag 2   -0.008576\n",
              "Lag 3   -0.036337\n",
              "Lag 4   -0.027167\n",
              "Lag 5   -0.041405\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.013243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.008576</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.036337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.027167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.041405</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'shortage_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.010935\n",
              "Lag 2   -0.004782\n",
              "Lag 3    0.006561\n",
              "Lag 4   -0.001711\n",
              "Lag 5   -0.000072\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.010935</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.004782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.006561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.001711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.000072</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'fellowship_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.022751\n",
              "Lag 2   -0.018301\n",
              "Lag 3   -0.016812\n",
              "Lag 4   -0.020114\n",
              "Lag 5   -0.021629\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.022751</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.018301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.016812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.020114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.021629</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'inexpensive_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.000779\n",
              "Lag 2    0.008889\n",
              "Lag 3   -0.000103\n",
              "Lag 4    0.002064\n",
              "Lag 5    0.020570\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.000779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.008889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.000103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.002064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.020570</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'valuable_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.016619\n",
              "Lag 2    0.013934\n",
              "Lag 3    0.022084\n",
              "Lag 4    0.014147\n",
              "Lag 5    0.019590\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.016619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.013934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.022084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.014147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.019590</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'bargain_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.036436\n",
              "Lag 2    0.024740\n",
              "Lag 3    0.037945\n",
              "Lag 4    0.016389\n",
              "Lag 5    0.032027\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.036436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.024740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.037945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.016389</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.032027</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'colony_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.026400\n",
              "Lag 2   -0.023152\n",
              "Lag 3   -0.024957\n",
              "Lag 4   -0.022133\n",
              "Lag 5   -0.024175\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.026400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.023152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.024957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.022133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.024175</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'liquidation_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.032624\n",
              "Lag 2   -0.031026\n",
              "Lag 3   -0.021351\n",
              "Lag 4   -0.021221\n",
              "Lag 5   -0.023847\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.032624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.031026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.021351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.021221</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.023847</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'debt_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.014802\n",
              "Lag 2    0.032516\n",
              "Lag 3    0.039660\n",
              "Lag 4    0.039798\n",
              "Lag 5    0.034302\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.014802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.032516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.039660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.039798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.034302</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'color_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.000947\n",
              "Lag 2    0.002084\n",
              "Lag 3    0.006871\n",
              "Lag 4   -0.008198\n",
              "Lag 5   -0.004859\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.000947</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.002084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.006871</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.008198</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.004859</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'restaurant_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.011369\n",
              "Lag 2   -0.010193\n",
              "Lag 3   -0.003281\n",
              "Lag 4   -0.022343\n",
              "Lag 5   -0.016782\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.011369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.010193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.003281</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.022343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.016782</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'portfolio_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.009999\n",
              "Lag 2   -0.000718\n",
              "Lag 3    0.006155\n",
              "Lag 4    0.005130\n",
              "Lag 5    0.004097\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.009999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.000718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.006155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.005130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.004097</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'housing_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.008128\n",
              "Lag 2    0.000691\n",
              "Lag 3    0.005989\n",
              "Lag 4    0.004978\n",
              "Lag 5    0.008212\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.008128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.000691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.005989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.004978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.008212</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'dow_jones_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.000353\n",
              "Lag 2    0.006716\n",
              "Lag 3    0.012338\n",
              "Lag 4    0.002491\n",
              "Lag 5   -0.000891\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.000353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.006716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.012338</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.002491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.000891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'revenue_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.028581\n",
              "Lag 2   -0.018058\n",
              "Lag 3   -0.017624\n",
              "Lag 4   -0.018817\n",
              "Lag 5   -0.004534\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.028581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.018058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.017624</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.018817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.004534</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'credit_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.003185\n",
              "Lag 2    0.015123\n",
              "Lag 3    0.014800\n",
              "Lag 4    0.000444\n",
              "Lag 5    0.020318\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.003185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.015123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.014800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.000444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.020318</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'unemployment_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.010150\n",
              "Lag 2   -0.002997\n",
              "Lag 3   -0.004336\n",
              "Lag 4    0.001230\n",
              "Lag 5    0.031239\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.010150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.002997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.004336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.001230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.031239</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'money_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.023305\n",
              "Lag 2    0.017168\n",
              "Lag 3    0.030035\n",
              "Lag 4    0.027282\n",
              "Lag 5    0.028516\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.023305</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.017168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.030035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.027282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.028516</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'religion_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.007769\n",
              "Lag 2   -0.009864\n",
              "Lag 3   -0.003929\n",
              "Lag 4   -0.008013\n",
              "Lag 5   -0.006864\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.007769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.009864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.003929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.008013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.006864</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'cancer_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.006575\n",
              "Lag 2    0.012364\n",
              "Lag 3    0.010351\n",
              "Lag 4    0.002593\n",
              "Lag 5    0.007760\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.006575</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.012364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.010351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.002593</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007760</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'growth_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.011977\n",
              "Lag 2    0.001750\n",
              "Lag 3    0.008932\n",
              "Lag 4    0.008278\n",
              "Lag 5    0.011050\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.011977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.001750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.008932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.008278</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.011050</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'investment_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.016900\n",
              "Lag 2    0.000316\n",
              "Lag 3    0.005344\n",
              "Lag 4    0.006852\n",
              "Lag 5    0.014020\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.016900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.000316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.005344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.006852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.014020</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'hedge_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.038298\n",
              "Lag 2   -0.044467\n",
              "Lag 3   -0.039787\n",
              "Lag 4   -0.042638\n",
              "Lag 5   -0.033694\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.038298</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.044467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.039787</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.042638</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.033694</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'marriage_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.025915\n",
              "Lag 2    0.016913\n",
              "Lag 3    0.033556\n",
              "Lag 4    0.042164\n",
              "Lag 5    0.041538\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.025915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.016913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.033556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.042164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.041538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'bonds_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.007938\n",
              "Lag 2    0.018054\n",
              "Lag 3    0.010098\n",
              "Lag 4    0.004018\n",
              "Lag 5    0.007190\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.007938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.018054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.010098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.004018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007190</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'cash_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.032393\n",
              "Lag 2   -0.035966\n",
              "Lag 3   -0.024291\n",
              "Lag 4   -0.039353\n",
              "Lag 5   -0.034688\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.032393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.035966</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.024291</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.039353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.034688</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'office_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.003504\n",
              "Lag 2    0.009277\n",
              "Lag 3    0.000131\n",
              "Lag 4   -0.005290\n",
              "Lag 5    0.014678\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.003504</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.009277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.000131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.005290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.014678</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'car_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.006347\n",
              "Lag 2   -0.011784\n",
              "Lag 3   -0.005520\n",
              "Lag 4   -0.004822\n",
              "Lag 5    0.009135\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.006347</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.011784</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.005520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.004822</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.009135</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'nasdaq_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.002521\n",
              "Lag 2    0.008375\n",
              "Lag 3    0.013648\n",
              "Lag 4    0.013139\n",
              "Lag 5    0.010272\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.002521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.008375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.013648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.013139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.010272</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'gains_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.015521\n",
              "Lag 2    0.003801\n",
              "Lag 3    0.009475\n",
              "Lag 4    0.010230\n",
              "Lag 5    0.014397\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.015521</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.003801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.009475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.010230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.014397</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'finance_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.022834\n",
              "Lag 2   -0.019565\n",
              "Lag 3   -0.013715\n",
              "Lag 4   -0.009280\n",
              "Lag 5   -0.013273\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.022834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.019565</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.013715</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.009280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.013273</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'sell_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.009304\n",
              "Lag 2   -0.003617\n",
              "Lag 3    0.001326\n",
              "Lag 4   -0.009589\n",
              "Lag 5   -0.008356\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.009304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.003617</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.001326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.009589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>-0.008356</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'metals_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.004145\n",
              "Lag 2    0.002201\n",
              "Lag 3   -0.001428\n",
              "Lag 4    0.005745\n",
              "Lag 5    0.007604\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.004145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.002201</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.001428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.005745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.007604</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'travel_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1   -0.012018\n",
              "Lag 2   -0.011029\n",
              "Lag 3   -0.005516\n",
              "Lag 4   -0.010610\n",
              "Lag 5    0.000523\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>-0.012018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>-0.011029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>-0.005516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>-0.010610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.000523</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Lagged Correlations between 'BTC-USD Log Returns' and 'chance_trend':\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Lag 1    0.000090\n",
              "Lag 2    0.000384\n",
              "Lag 3    0.003646\n",
              "Lag 4    0.001634\n",
              "Lag 5    0.005139\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Lag 1</th>\n",
              "      <td>0.000090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 2</th>\n",
              "      <td>0.000384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 3</th>\n",
              "      <td>0.003646</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 4</th>\n",
              "      <td>0.001634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lag 5</th>\n",
              "      <td>0.005139</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Keywords with Significant Lagged Correlation (|r| > 0.1) ---\n",
            "No keywords found with absolute lagged correlation greater than 0.1 at any lag period.\n"
          ]
        }
      ],
      "source": [
        "from datetime import date\n",
        "import pandas as pd\n",
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from google.colab import drive\n",
        "from google.colab import auth\n",
        "from googleapiclient.discovery import build\n",
        "from googleapiclient.http import MediaFileUpload\n",
        "import os\n",
        "\n",
        "\n",
        "#The first data set we will want to see is USD over a 10 year period\n",
        "\n",
        "tickers = [\"DXY\", \"USDCNY=X\",\"BTC-USD\",\"CL=F\", \"GC=F\"]\n",
        "\n",
        "#The definition of tickers will assist in a batch query rather than a singular batch query\n",
        "\n",
        "data = yf.download(tickers, period=\"10y\", interval=\"1d\")\n",
        "\n",
        "# Extract Open, High, Low, and Close data\n",
        "df_open = data[\"Open\"]\n",
        "df_high = data[\"High\"]\n",
        "df_low = data[\"Low\"]\n",
        "df_close = data[\"Close\"]\n",
        "\n",
        "# Rename columns to indicate price type\n",
        "df_open.columns = [f\"{col} Open\" for col in df_open.columns]\n",
        "df_high.columns = [f\"{col} High\" for col in df_high.columns]\n",
        "df_low.columns = [f\"{col} Low\" for col in df_low.columns]\n",
        "df_close.columns = [f\"{col} Close\" for col in df_close.columns]\n",
        "\n",
        "# Merge the dataframes\n",
        "df_merged = pd.merge(df_close, df_open, left_index=True, right_index=True)\n",
        "df_merged = pd.merge(df_merged, df_high, left_index=True, right_index=True)\n",
        "df_merged = pd.merge(df_merged, df_low, left_index=True, right_index=True)\n",
        "\n",
        "# Keep only weekdays\n",
        "df_merged = df_merged[df_merged.index.dayofweek < 5]\n",
        "\n",
        "# Fill NaN values with the previous day's data\n",
        "df_merged = df_merged.fillna(method='ffill')\n",
        "\n",
        "# Drop the first row\n",
        "df_merged = df_merged.iloc[1:]\n",
        "\n",
        "# Calculate the conditional rolling average for each ticker's close price\n",
        "for ticker in tickers:\n",
        "    close_col = f\"{ticker} Close\"\n",
        "    sma_col = f\"{ticker} 20-day simple moving average\"\n",
        "    df_merged[sma_col] = None # Initialize the column with None\n",
        "\n",
        "    for i in range(len(df_merged)):\n",
        "        if i < 20:\n",
        "            window = i + 1\n",
        "        else:\n",
        "            window = 20\n",
        "        df_merged.loc[df_merged.index[i], sma_col] = df_merged[close_col].iloc[max(0, i - window + 1):i + 1].mean()\n",
        "\n",
        "# Calculate 14-day Relative Strength Index (RSI) for each ticker\n",
        "for ticker in tickers:\n",
        "    close_col = f\"{ticker} Close\"\n",
        "    rsi_col = f\"{ticker} 14-day RSI\"\n",
        "\n",
        "    # Calculate daily price change\n",
        "    df_merged[f\"{ticker} Change\"] = df_merged[close_col].diff()\n",
        "\n",
        "    # Calculate gains and losses\n",
        "    df_merged[f\"{ticker} Gain\"] = df_merged[f\"{ticker} Change\"].apply(lambda x: x if x > 0 else 0)\n",
        "    df_merged[f\"{ticker} Loss\"] = df_merged[f\"{ticker} Change\"].apply(lambda x: abs(x) if x < 0 else 0)\n",
        "\n",
        "    # Calculate average gain and average loss over 14 days\n",
        "    # Adjust window size for the first 13 days\n",
        "    df_merged[f\"{ticker} Avg Gain\"] = [df_merged[f\"{ticker} Gain\"].iloc[max(0, i - min(i, 13)):i+1].mean() if i > 0 else np.nan for i in range(len(df_merged))]\n",
        "    df_merged[f\"{ticker} Avg Loss\"] = [df_merged[f\"{ticker} Loss\"].iloc[max(0, i - min(i, 13)):i+1].mean() if i > 0 else np.nan for i in range(len(df_merged))]\n",
        "\n",
        "\n",
        "    # Calculate Relative Strength (RS)\n",
        "    df_merged[f\"{ticker} RS\"] = df_merged[f\"{ticker} Avg Gain\"] / df_merged[f\"{ticker} Avg Loss\"]\n",
        "\n",
        "    # Calculate Relative Strength Index (RSI)\n",
        "    df_merged[rsi_col] = 100 - (100 / (1 + df_merged[f\"{ticker} RS\"]))\n",
        "\n",
        "    # Drop intermediate columns\n",
        "    df_merged = df_merged.drop(columns=[f\"{ticker} Change\", f\"{ticker} Gain\", f\"{ticker} Loss\", f\"{ticker} Avg Gain\", f\"{ticker} Avg Loss\", f\"{ticker} RS\"])\n",
        "\n",
        "\n",
        "# Calculate log returns for each ticker\n",
        "for ticker in tickers:\n",
        "    close_col = f\"{ticker} Close\"\n",
        "    log_return_col = f\"{ticker} Log Returns\"\n",
        "    df_merged[log_return_col] = np.log(df_merged[close_col] / df_merged[close_col].shift(1))\n",
        "\n",
        "\n",
        "# Calculate 30-day rolling volatility for each ticker\n",
        "for ticker in tickers:\n",
        "    close_col = f\"{ticker} Close\"\n",
        "    volatility_col = f\"{ticker} 30-day Rolling Volatility\"\n",
        "\n",
        "    # Calculate daily returns\n",
        "    df_merged[f\"{ticker} Returns\"] = df_merged[close_col].pct_change()\n",
        "\n",
        "    # Calculate rolling volatility using the formula with conditional window\n",
        "    df_merged[volatility_col] = [df_merged[f\"{ticker} Returns\"].iloc[max(0, i - min(i, 29)):i + 1].std() if i > 0 else np.nan for i in range(len(df_merged))]\n",
        "\n",
        "    # Drop intermediate columns\n",
        "    df_merged = df_merged.drop(columns=[f\"{ticker} Returns\"])\n",
        "\n",
        "\n",
        "display(df_merged.head(40))\n",
        "\n",
        "print(\"\\nAssumptions for Data Calculations:\")\n",
        "print(\"- 20-day Simple Moving Average: For the first 20 rows, the rolling average window starts from 1 and increases up to the current row number. After the first 20 rows, a fixed 20-day window is used.\")\n",
        "print(\"- 30-day Rolling Volatility: For the first 29 rows, the rolling volatility window starts from 1 and increases up to the current row number. After the first 29 rows, a fixed 30-day window is used.\")\n",
        "\n",
        "# Authenticate and mount Google Drive\n",
        "# Check if Google Drive is already mounted\n",
        "if not os.path.exists('/content/drive'):\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "else:\n",
        "    print(\"Google Drive is already mounted.\")\n",
        "\n",
        "auth.authenticate_user()\n",
        "drive_service = build('drive', 'v3')\n",
        "\n",
        "# Define the folder ID and filename\n",
        "folder_id = '1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA'\n",
        "today = date.today()\n",
        "filename = f\"financial_data_raw_data_from_yf{today.strftime('%Y-%m-%d')}.csv\"\n",
        "filepath = f\"/content/{filename}\" # Save locally first\n",
        "\n",
        "# Save the DataFrame to a temporary local CSV file\n",
        "# Make sure the dataframe 'df_merged' exists\n",
        "try:\n",
        "    df_merged.to_csv(filepath)\n",
        "except NameError:\n",
        "    print(\"Error: DataFrame 'df_merged' not found. Please run the cell that creates 'df_merged' first.\")\n",
        "    # Exit or handle the error appropriately if df_merged is not defined\n",
        "    exit()\n",
        "\n",
        "\n",
        "# Create a file in the shared drive\n",
        "file_metadata = {\n",
        "    'name': filename,\n",
        "    'parents': [folder_id]\n",
        "}\n",
        "\n",
        "media = MediaFileUpload(filepath, mimetype='text/csv')\n",
        "\n",
        "try:\n",
        "    gfile = drive_service.files().create(\n",
        "        body=file_metadata,\n",
        "        media_body=media,\n",
        "        fields='id'\n",
        "    ).execute()\n",
        "\n",
        "    print(f\"File ID: {gfile.get('id')}\")\n",
        "    print(f\"Data exported to shared drive folder: {folder_id}\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error exporting data to shared drive: {e}\")\n",
        "    # Handle specific Drive API errors if needed\n",
        "\n",
        "# Clean up the local file\n",
        "os.remove(filepath)\n",
        "\n",
        "# === Multi-keyword Google Trends Pipeline ===\n",
        "# What this does:\n",
        "# - Loops over a list of keywords (like \"USD\", \"gold price\", \"bitcoin\")\n",
        "# - For each keyword:\n",
        "#     * If we already have a CSV saved for that keyword, load it (skip download)\n",
        "#     * If not, download daily Google Trends data in 6-month chunks\n",
        "#     * Clean it to daily frequency (fill missing values)\n",
        "#     * Save it to /processed folder\n",
        "# - Combine all keyword trend files into one dataframe\n",
        "# - Merge that dataframe into the financial dataset (anchor table)\n",
        "# - Save everything back into /processed\n",
        "#\n",
        "# End result:\n",
        "#   - One CSV per keyword (trends_<keyword>.csv)\n",
        "#   - A combined all-keywords trends CSV (trends_all_keywords_daily.csv)\n",
        "#   - A merged financial+trends CSV (merged_with_trends_multi.csv)\n",
        "\n",
        "# -----------------------------\n",
        "# Project folders (we keep everything under /gt-markets/data/google keyword trends)\n",
        "# -----------------------------\n",
        "PROJECT_DIR = \"/content/drive/MyDrive/gt-markets\"\n",
        "DATA_DIR    = f\"{PROJECT_DIR}/data\"\n",
        "PROC_DIR    = f\"{DATA_DIR}/google keyword trends\" # Renamed processing directory\n",
        "os.makedirs(PROC_DIR, exist_ok=True)  # make sure /google keyword trends exists\n",
        "\n",
        "# -----------------------------\n",
        "# Anchor dataframe (financial data table we merge trends into)\n",
        "# We prefer \"prices\" (daily multi-asset data). If not defined, fall back to df_weekday_usd_reordered.\n",
        "# -----------------------------\n",
        "try:\n",
        "    anchor = df_merged.copy()\n",
        "    print(\"[info] Using 'df_merged' as the anchor table\")\n",
        "except NameError:\n",
        "    print(\"[error] DataFrame 'df_merged' not found. Please run the cell that creates 'df_merged' first.\")\n",
        "    # Exit or handle the error appropriately if df_merged is not defined\n",
        "    exit()\n",
        "\n",
        "\n",
        "# Make sure the index (row labels) is datetime so we can align by date\n",
        "anchor.index = pd.to_datetime(anchor.index)\n",
        "\n",
        "# Date range for trends = same as the anchor dataframe\n",
        "start_date = pd.to_datetime(anchor.index.min()).date()\n",
        "end_date   = pd.to_datetime(anchor.index.max()).date()\n",
        "print(f\"[info] Trends date range: {start_date} → {end_date}\")\n",
        "\n",
        "# -----------------------------\n",
        "# Keywords we want to track in Google Trends\n",
        "# Add/remove keywords in this list as needed\n",
        "# -----------------------------\n",
        "KEYWORDS = [\n",
        "    \"USD\",\n",
        "    \"gold price\",\n",
        "    \"bitcoin\",\n",
        "    \"oil price\",\n",
        "    \"Chinese yuan\",\n",
        "    \"inflation\",\n",
        "    \"interest rates\",\n",
        "    \"stock market\",\n",
        "    \"recession\",\n",
        "    \"economic growth\",\n",
        "    \"currency exchange\",\n",
        "    \"commodity prices\",\n",
        "    \"treasury bonds\",\n",
        "    \"central bank\",\n",
        "    \"consumer spending\",\n",
        "    \"intervention\",\n",
        "    \"gamble\",\n",
        "    \"gold\",\n",
        "    \"luxury\",\n",
        "    \"ruin\",\n",
        "    \"associate\",\n",
        "    \"cooperative\",\n",
        "    \"pollution\",\n",
        "    \"success\",\n",
        "    \"gift\",\n",
        "    \"affluent\",\n",
        "    \"benevolence\",\n",
        "    \"partnership\",\n",
        "    \"poor\",\n",
        "    \"blackmail\",\n",
        "    \"privileged\",\n",
        "    \"ghetto\",\n",
        "    \"extravagant\",\n",
        "    \"nobility\",\n",
        "    \"cheap\",\n",
        "    \"entrepreneurial,\",\n",
        "    \"jobless\",\n",
        "    \"shortage\",\n",
        "    \"fellowship\",\n",
        "    \"inexpensive\",\n",
        "    \"valuable\",\n",
        "    \"bargain\",\n",
        "    \"colony\",\n",
        "    \"liquidation\",\n",
        "    \"debt\",\n",
        "    \"color\",\n",
        "    \"restaurant\",\n",
        "    \"portfolio\",\n",
        "    \"housing\",\n",
        "    \"dow jones\",\n",
        "    \"revenue\",\n",
        "    \"credit\",\n",
        "    \"unemployment\",\n",
        "    \"money\",\n",
        "    \"religion\",\n",
        "    \"cancer\",\n",
        "    \"growth\",\n",
        "    \"investment\",\n",
        "    \"hedge\",\n",
        "    \"marriage\",\n",
        "    \"bonds\",\n",
        "    \"cash\",\n",
        "    \"office\",\n",
        "    \"car\",\n",
        "    \"nasdaq\",\n",
        "    \"gains\",\n",
        "    \"finance\",\n",
        "    \"sell\",\n",
        "    \"metals\",\n",
        "    \"travel\",\n",
        "    \"chance\"\n",
        "\n",
        "]\n",
        "\n",
        "# -----------------------------\n",
        "# Helper: convert a keyword into a safe slug (for filenames and column names)\n",
        "# Example: \"Gold Price\" -> \"gold_price\"\n",
        "# -----------------------------\n",
        "def slugify(text: str) -> str:\n",
        "    text = text.strip().lower()\n",
        "    text = re.sub(r\"[^a-z0-9]+\", \"_\", text)  # replace spaces/symbols with \"_\"\n",
        "    return text.strip(\"_\")\n",
        "\n",
        "# -----------------------------\n",
        "# Helper: yield 6-month chunks between start_date and end_date\n",
        "# Google Trends only lets you pull limited time spans at once\n",
        "# -----------------------------\n",
        "def daterange_chunks(s: dt.date, e: dt.date, months=6):\n",
        "    cur = s\n",
        "    while cur <= e:\n",
        "        nxt = min(cur + relativedelta(months=months) - relativedelta(days=1), e)\n",
        "        yield cur, nxt\n",
        "        cur = nxt + relativedelta(days=1)\n",
        "\n",
        "# -----------------------------\n",
        "# Helper: fetch daily Google Trends for one keyword\n",
        "# Steps:\n",
        "#   - Loop over chunks (6 months each)\n",
        "#   - Request data from Google\n",
        "#   - Collect into a dataframe\n",
        "#   - Align to daily frequency (forward fill missing days)\n",
        "# -----------------------------\n",
        "def fetch_trends_daily(keyword: str, start_date: dt.date, end_date: dt.date, months_per_chunk: int = 6) -> pd.DataFrame:\n",
        "    pt = TrendReq(hl=\"en-US\", tz=0)  # session for Google Trends\n",
        "    frames = []\n",
        "    for i, (s, e) in enumerate(daterange_chunks(start_date, end_date, months_per_chunk), 1):\n",
        "        timeframe = f\"{s} {e}\"\n",
        "        tries, delay = 0, 8\n",
        "        while True:\n",
        "            try:\n",
        "                pt.build_payload([keyword], timeframe=timeframe, geo='', gprop='')\n",
        "                part = pt.interest_over_time().drop(columns=[\"isPartial\"], errors=\"ignore\")\n",
        "                if len(part):\n",
        "                    part = part.rename(columns={keyword: keyword})\n",
        "                    frames.append(part)\n",
        "                print(f\"[ok] {keyword} chunk {i}: {s} → {e}, rows={len(part)}\")\n",
        "                time.sleep(1.0)  # polite pause so Google doesn't block us\n",
        "                break\n",
        "            except Exception as ex:\n",
        "                tries += 1\n",
        "                if tries > 5:  # give up after 5 retries\n",
        "                    print(f\"[warn] {keyword} failed for {timeframe}: {ex}\")\n",
        "                    break\n",
        "                print(f\"[429/backoff] {keyword} {timeframe} → sleep {delay}s … (try {tries}/5)\")\n",
        "                time.sleep(delay)\n",
        "                delay = min(int(delay * 1.8), 180)  # exponential backoff\n",
        "\n",
        "    if not frames:\n",
        "        return pd.DataFrame()  # nothing returned\n",
        "\n",
        "    # Combine all chunks into one dataframe\n",
        "    out = pd.concat(frames).sort_index()\n",
        "    out.index = pd.to_datetime(out.index)\n",
        "    # Force daily frequency (if Google gave weekly, fill in the missing days)\n",
        "    out = out.asfreq(\"D\").ffill()\n",
        "    return out\n",
        "\n",
        "# -----------------------------\n",
        "# Main loop over keywords\n",
        "# For each keyword:\n",
        "#   - If CSV already exists, load it\n",
        "#   - Else fetch from Google and save\n",
        "#   - Ensure column has a unique name (<keyword>_trend)\n",
        "#   - Add to all_trends list for later combination\n",
        "# -----------------------------\n",
        "all_trends = []\n",
        "\n",
        "# Authenticate and mount Google Drive (if not already mounted)\n",
        "try:\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    auth.authenticate_user()\n",
        "    drive_service = build('drive', 'v3')\n",
        "except Exception as e:\n",
        "    print(f\"Google Drive authentication or mount failed: {e}\")\n",
        "    # Exit or handle the error appropriately if mount fails\n",
        "    pass\n",
        "\n",
        "# Define the Google Drive folder ID for keyword CSVs\n",
        "keyword_folder_id = '1nYgH5q4WSvaNxFMIMHb72m3SWLzuwjDH' # User specified folder ID for keyword CSVs\n",
        "\n",
        "for kw in KEYWORDS:\n",
        "    print(f\"\\n=== Keyword: {kw} ===\")\n",
        "    slug = slugify(kw)\n",
        "    col_name = f\"{slug}_trend\"\n",
        "    per_kw_filename = f\"trends_{slug}_daily.csv\"\n",
        "    per_kw_filepath_local = f\"/content/{per_kw_filename}\" # Save locally first\n",
        "\n",
        "    # Check if file exists in the specified Google Drive folder\n",
        "    file_list = drive_service.files().list(\n",
        "        q=f\"name='{per_kw_filename}' and '{keyword_folder_id}' in parents\",\n",
        "        spaces='drive',\n",
        "        fields='files(id, name)'\n",
        "    ).execute().get('files', [])\n",
        "\n",
        "    if file_list:\n",
        "        # If file already exists, load it from Google Drive\n",
        "        print(f\"[skip] Found existing file in Google Drive: {per_kw_filename}\")\n",
        "        file_id = file_list[0]['id']\n",
        "        # Download the file\n",
        "        request = drive_service.files().get_media(fileId=file_id)\n",
        "        with open(per_kw_filepath_local, 'wb') as f:\n",
        "            from googleapiclient.http import MediaIoBaseDownload\n",
        "            downloader = MediaIoBaseDownload(f, request)\n",
        "            done = False\n",
        "            while done is False:\n",
        "                status, done = downloader.next_chunk()\n",
        "                print(f\"Download {int(status.progress() * 100)}%.\")\n",
        "\n",
        "        tdf = pd.read_csv(per_kw_filepath_local, index_col=0, parse_dates=True)\n",
        "        # Ensure daily grid (if old file had weekly rows)\n",
        "        tdf = tdf.asfreq(\"D\").ffill()\n",
        "        os.remove(per_kw_filepath_local) # Clean up local file after loading\n",
        "\n",
        "    else:\n",
        "        # Download from Google Trends\n",
        "        tdf = fetch_trends_daily(kw, start_date, end_date)\n",
        "        if tdf.empty:\n",
        "            print(f\"[warn] No data for '{kw}'. Skipping.\")\n",
        "            continue\n",
        "        # Rename column to e.g. \"usd_trend\" or \"gold_price_trend\"\n",
        "        tdf = tdf.rename(columns={kw: col_name})\n",
        "        # Save to a temporary local CSV file\n",
        "        tdf.to_csv(per_kw_filepath_local)\n",
        "\n",
        "        # Upload to the specified Google Drive folder\n",
        "        file_metadata = {\n",
        "            'name': per_kw_filename,\n",
        "            'parents': [keyword_folder_id]\n",
        "        }\n",
        "        media = MediaFileUpload(per_kw_filepath_local, mimetype='text/csv')\n",
        "        try:\n",
        "            gfile = drive_service.files().create(\n",
        "                body=file_metadata,\n",
        "                media_body=media,\n",
        "                fields='id'\n",
        "            ).execute()\n",
        "            print(f\"[ok] saved {kw}: {tdf.shape} → Google Drive File ID: {gfile.get('id')}\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error uploading {per_kw_filename} to Google Drive: {e}\")\n",
        "\n",
        "        os.remove(per_kw_filepath_local) # Clean up local file after uploading\n",
        "\n",
        "\n",
        "    # Safety check: make sure column name is correct\n",
        "    if col_name not in tdf.columns:\n",
        "        tdf = tdf.rename(columns={tdf.columns[0]: col_name})\n",
        "\n",
        "    # Keep only the single trend column\n",
        "    all_trends.append(tdf[[col_name]])\n",
        "\n",
        "# -----------------------------\n",
        "# Combine all keyword trend dataframes into one\n",
        "# Save the combined trends CSV to the specified Google Drive folder\n",
        "# -----------------------------\n",
        "if all_trends:\n",
        "    trends_all = pd.concat(all_trends, axis=1).sort_index()\n",
        "    trends_all_filename = \"trends_all_keywords_daily.csv\"\n",
        "    trends_all_filepath_local = f\"/content/{trends_all_filename}\" # Save locally first\n",
        "    trends_all.to_csv(trends_all_filepath_local)\n",
        "\n",
        "    # Upload the combined trends CSV to the specified Google Drive folder\n",
        "    file_metadata = {\n",
        "        'name': trends_all_filename,\n",
        "        'parents': [keyword_folder_id] # Save in the same keyword folder\n",
        "    }\n",
        "    media = MediaFileUpload(trends_all_filepath_local, mimetype='text/csv')\n",
        "    try:\n",
        "        gfile = drive_service.files().create(\n",
        "            body=file_metadata,\n",
        "            media_body=media,\n",
        "            fields='id'\n",
        "        ).execute()\n",
        "        print(f\"[ok] saved combined trends: {trends_all.shape} → Google Drive File ID: {gfile.get('id')}\")\n",
        "    except Exception as e:\n",
        "        print(f\"Error uploading {trends_all_filename} to Google Drive: {e}\")\n",
        "\n",
        "    os.remove(trends_all_filepath_local) # Clean up local file\n",
        "\n",
        "    # Merge trends into anchor financial dataset (keep all rows from anchor)\n",
        "    merged = anchor.join(trends_all, how=\"left\")\n",
        "else:\n",
        "    print(\"[warn] No trends tables created; merged will just equal anchor table\")\n",
        "    merged = anchor.copy()\n",
        "\n",
        "# -----------------------------\n",
        "# Save the merged financial+trends dataset to Google Drive (original folder)\n",
        "# -----------------------------\n",
        "# Authenticate and mount Google Drive (if not already mounted)\n",
        "# This part is already done at the beginning, but keeping it here for clarity if this section were standalone\n",
        "# try:\n",
        "#     drive.mount('/content/drive', force_remount=True)\n",
        "#     auth.authenticate_user()\n",
        "#     drive_service = build('drive', 'v3')\n",
        "# except Exception as e:\n",
        "#     print(f\"Google Drive authentication or mount failed: {e}\")\n",
        "#     # Exit or handle the error appropriately if mount fails\n",
        "#     pass\n",
        "\n",
        "# Define the folder ID for the merged data (original folder)\n",
        "merged_folder_id = '1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA'  # Original User specified folder ID\n",
        "today = date.today()\n",
        "merged_filename = f\"merged_financial_trends_data_{today.strftime('%Y-%m-%d')}.csv\"\n",
        "merged_filepath_local = f\"/content/{merged_filename}\" # Save locally first\n",
        "\n",
        "# Save the merged DataFrame to a temporary local CSV file\n",
        "merged.to_csv(merged_filepath_local)\n",
        "\n",
        "# Create a file in the shared drive using the Google Drive API\n",
        "file_metadata = {\n",
        "    'name': merged_filename,\n",
        "    'parents': [merged_folder_id]\n",
        "}\n",
        "\n",
        "media = MediaFileUpload(merged_filepath_local, mimetype='text/csv')\n",
        "\n",
        "try:\n",
        "    gfile = drive_service.files().create(\n",
        "        body=file_metadata,\n",
        "        media_body=media,\n",
        "        fields='id'\n",
        "    ).execute()\n",
        "\n",
        "    print(f\"Merged Data File ID: {gfile.get('id')}\")\n",
        "    print(f\"Merged Data exported to shared drive folder: {merged_folder_id}\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error exporting merged data to shared drive: {e}\")\n",
        "\n",
        "# Clean up the local file\n",
        "os.remove(merged_filepath_local)\n",
        "\n",
        "\n",
        "# -----------------------------\n",
        "# Tips for adding keywords later:\n",
        "# - Just add the new keyword text to the KEYWORDS list above\n",
        "# - Run the cell again\n",
        "# - The code will automatically fetch and save only the new ones\n",
        "# - Existing CSVs will be reused (skipped)\n",
        "# -----------------------------\n",
        "\n",
        "from google.colab import drive\n",
        "from google.colab import auth\n",
        "from googleapiclient.discovery import build\n",
        "from googleapiclient.http import MediaIoBaseDownload\n",
        "import pandas as pd\n",
        "import os\n",
        "from datetime import date\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Authenticate and mount Google Drive (if not already mounted)\n",
        "try:\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    auth.authenticate_user()\n",
        "    drive_service = build('drive', 'v3')\n",
        "except Exception as e:\n",
        "    print(f\"Google Drive authentication or mount failed: {e}\")\n",
        "    # Handle the error appropriately if mount fails\n",
        "\n",
        "\n",
        "# --- Load trends_all_keywords_daily.csv ---\n",
        "trends_folder_id = '1nYgH5q4WSvaNxFMIMHb72m3SWLzuwjDH'\n",
        "trends_filename = \"trends_all_keywords_daily.csv\"\n",
        "trends_filepath_local = f\"/content/{trends_filename}\"\n",
        "\n",
        "print(f\"Attempting to load {trends_filename} from Google Drive folder: {trends_folder_id}\")\n",
        "\n",
        "# Find the file in the specified Google Drive folder\n",
        "file_list = drive_service.files().list(\n",
        "    q=f\"name='{trends_filename}' and '{trends_folder_id}' in parents\",\n",
        "    spaces='drive',\n",
        "    fields='files(id, name)'\n",
        ").execute().get('files', [])\n",
        "\n",
        "if file_list:\n",
        "    trends_file_id = file_list[0]['id']\n",
        "    print(f\"Found file with ID: {trends_file_id}\")\n",
        "    request = drive_service.files().get_media(fileId=trends_file_id)\n",
        "    with open(trends_filepath_local, 'wb') as f:\n",
        "        downloader = MediaIoBaseDownload(f, request)\n",
        "        done = False\n",
        "        while done is False:\n",
        "            status, done = downloader.next_chunk()\n",
        "            print(f\"Download {int(status.progress() * 100)}%.\")\n",
        "    df_trends = pd.read_csv(trends_filepath_local, index_col=0, parse_dates=True)\n",
        "    print(f\"Successfully loaded {trends_filename}. Shape: {df_trends.shape}\")\n",
        "    os.remove(trends_filepath_local) # Clean up local file\n",
        "else:\n",
        "    print(f\"Error: {trends_filename} not found in folder {trends_folder_id}\")\n",
        "    df_trends = pd.DataFrame() # Create an empty DataFrame if file not found\n",
        "\n",
        "\n",
        "# --- Load merged_financial_trends_data_<today's date>.csv ---\n",
        "merged_folder_id = '1wOqTixtRA5n5uHN1ptfIbQm6suTrLDxA'\n",
        "today = date.today()\n",
        "merged_filename = f\"merged_financial_trends_data_{today.strftime('%Y-%m-%d')}.csv\"\n",
        "merged_filepath_local = f\"/content/{merged_filename}\"\n",
        "\n",
        "print(f\"\\nAttempting to load {merged_filename} from Google Drive folder: {merged_folder_id}\")\n",
        "\n",
        "# Find the file in the specified Google Drive folder\n",
        "file_list = drive_service.files().list(\n",
        "    q=f\"name='{merged_filename}' and '{merged_folder_id}' in parents\",\n",
        "    spaces='drive',\n",
        "    fields='files(id, name)'\n",
        ").execute().get('files', [])\n",
        "\n",
        "if file_list:\n",
        "    merged_file_id = file_list[0]['id']\n",
        "    print(f\"Found file with ID: {merged_file_id}\")\n",
        "    request = drive_service.files().get_media(fileId=merged_file_id)\n",
        "    with open(merged_filepath_local, 'wb') as f:\n",
        "        downloader = MediaIoBaseDownload(f, request)\n",
        "        done = False\n",
        "        while done is False:\n",
        "            status, done = downloader.next_chunk()\n",
        "            print(f\"Download {int(status.progress() * 100)}%.\")\n",
        "    df_financial = pd.read_csv(merged_filepath_local, index_col=0, parse_dates=True)\n",
        "    print(f\"Successfully loaded {merged_filename}. Shape: {df_financial.shape}\")\n",
        "    os.remove(merged_filepath_local) # Clean up local file\n",
        "else:\n",
        "    print(f\"Error: {merged_filename} not found in folder {merged_folder_id}\")\n",
        "    df_financial = pd.DataFrame() # Create an empty DataFrame if file not found\n",
        "\n",
        "\n",
        "# --- Merge the two dataframes ---\n",
        "if not df_trends.empty and not df_financial.empty:\n",
        "    df_combined = pd.merge(df_financial, df_trends, left_index=True, right_index=True, how='left')\n",
        "    # Clean up duplicate column suffixes from merge\n",
        "    df_combined.columns = df_combined.columns.str.replace('_x$', '', regex=True)\n",
        "    df_combined.columns = df_combined.columns.str.replace('_y$', '', regex=True)\n",
        "    # Handle potential remaining duplicates by keeping one (e.g., from df_financial)\n",
        "    df_combined = df_combined.loc[:,~df_combined.columns.duplicated(keep='first')]\n",
        "    print(\"\\nSuccessfully merged dataframes.\")\n",
        "    display(df_combined.head())\n",
        "elif not df_trends.empty:\n",
        "    print(\"\\nFinancial data not loaded, combined dataframe is just trends data.\")\n",
        "    df_combined = df_trends.copy()\n",
        "    display(df_combined.head())\n",
        "elif not df_financial.empty:\n",
        "    print(\"\\nTrends data not loaded, combined dataframe is just financial data.\")\n",
        "    df_combined = df_financial.copy()\n",
        "    display(df_combined.head())\n",
        "else:\n",
        "    print(\"\\nNeither financial nor trends data could be loaded. Combined dataframe is empty.\")\n",
        "    df_combined = pd.DataFrame()\n",
        "\n",
        "\n",
        "# --- Create a new dataframe for BTC-USD including all trends ---\n",
        "if not df_combined.empty:\n",
        "    btc_log_returns_column = 'BTC-USD Log Returns'\n",
        "    trend_columns = [col for col in df_combined.columns if '_trend' in col]\n",
        "    # Ensure 'BTC-USD Log Returns' is in the list of columns if it exists\n",
        "    btc_specific_columns = [btc_log_returns_column] if btc_log_returns_column in df_combined.columns else []\n",
        "\n",
        "    df_btc = df_combined[btc_specific_columns + trend_columns].copy()\n",
        "    print(\"\\nCreated BTC-USD specific dataframe including all trends.\")\n",
        "    display(df_btc.head())\n",
        "\n",
        "    # --- Calculate and display the correlation of 'BTC-USD Log Returns' with Keyword Trends ---\n",
        "    # Drop rows with NaN values from df_btc for correlation calculation\n",
        "    df_btc_cleaned = df_btc.dropna().copy()\n",
        "\n",
        "    print(\"\\nShape of the BTC-USD dataframe after dropping rows with NaN for correlation:\")\n",
        "    print(df_btc_cleaned.shape)\n",
        "\n",
        "\n",
        "    if btc_log_returns_column in df_btc_cleaned.columns:\n",
        "        btc_log_returns_correlation = df_btc_cleaned.corr()[btc_log_returns_column]\n",
        "\n",
        "        # Filter to show only correlations with trend columns (redundant here as df_btc_cleaned only has BTC and trends)\n",
        "        # trend_correlations = btc_log_returns_correlation[btc_log_returns_correlation.index.str.endswith('_trend')]\n",
        "        trend_correlations = btc_log_returns_correlation[btc_log_returns_correlation.index != btc_log_returns_column]\n",
        "\n",
        "\n",
        "        print(\"\\nCorrelation of 'BTC-USD Log Returns' with Keyword Trends:\")\n",
        "        display(trend_correlations.sort_values(ascending=False))\n",
        "\n",
        "        # Create a heatmap of the correlations between BTC-USD Log Returns and trend columns\n",
        "        if not trend_correlations.empty:\n",
        "            plt.figure(figsize=(10, 8)) # Adjust figure size for better readability\n",
        "            sns.heatmap(trend_correlations.to_frame(), annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "            plt.title('Correlation Heatmap: BTC-USD Log Returns vs. Keyword Trends')\n",
        "            plt.show()\n",
        "        else:\n",
        "            print(\"\\nNo trend correlations to display heatmap for (trend_correlations is empty).\")\n",
        "\n",
        "    else:\n",
        "        print(\"\\n'BTC-USD Log Returns' column not found in the cleaned BTC-USD DataFrame.\")\n",
        "\n",
        "\n",
        "else:\n",
        "    print(\"\\nCombined dataframe is empty, cannot perform correlation analysis.\")\n",
        "    df_btc = pd.DataFrame()\n",
        "\n",
        "import statsmodels.api as sm\n",
        "import pandas as pd # Ensure pandas is imported\n",
        "\n",
        "# --- Linear Regression ---\n",
        "print(\"--- Linear Regression (Example with 'bitcoin_trend') ---\")\n",
        "\n",
        "# Drop rows with NaN values for the specific columns needed for regression\n",
        "# (df_btc_cleaned was already created and NaNs dropped in the previous cell)\n",
        "# We'll use df_btc_cleaned directly\n",
        "\n",
        "# Define dependent and independent variables\n",
        "# Using 'bitcoin_trend' as an example predictor\n",
        "if 'BTC-USD Log Returns' in df_btc_cleaned.columns and 'bitcoin_trend' in df_btc_cleaned.columns:\n",
        "    y = df_btc_cleaned['BTC-USD Log Returns']\n",
        "    X = df_btc_cleaned['bitcoin_trend']\n",
        "\n",
        "    # Add a constant to the independent variable for the intercept\n",
        "    X = sm.add_constant(X)\n",
        "\n",
        "    # Fit the linear regression model\n",
        "    model = sm.OLS(y, X).fit()\n",
        "\n",
        "    # Print the regression summary\n",
        "    print(model.summary())\n",
        "else:\n",
        "    print(\"Required columns for linear regression not found in df_btc_cleaned.\")\n",
        "\n",
        "print(\"\\n--- Lagged Correlations ---\")\n",
        "\n",
        "# Calculate lagged correlations for all keyword trends\n",
        "lag_periods = 5 # Check correlations for lags up to 5 days\n",
        "\n",
        "# Get all keyword trend columns\n",
        "all_trend_keywords = [col for col in df_btc_cleaned.columns if col.endswith('_trend')]\n",
        "\n",
        "keywords_with_significant_lagged_correlation = []\n",
        "\n",
        "for keyword in all_trend_keywords:\n",
        "    if 'BTC-USD Log Returns' in df_btc_cleaned.columns:\n",
        "        print(f\"\\nLagged Correlations between 'BTC-USD Log Returns' and '{keyword}':\")\n",
        "        lagged_correlations = {}\n",
        "        has_significant_lag = False\n",
        "        for lag in range(1, lag_periods + 1):\n",
        "            # Shift the trend data by the lag period (lagged trend data)\n",
        "            lagged_trend = df_btc_cleaned[keyword].shift(lag)\n",
        "\n",
        "            # Calculate correlation between BTC-USD Log Returns and lagged trend\n",
        "            correlation = df_btc_cleaned['BTC-USD Log Returns'].corr(lagged_trend)\n",
        "            lagged_correlations[f\"Lag {lag}\"] = correlation\n",
        "\n",
        "            # Check for significant correlation\n",
        "            if pd.notna(correlation) and abs(correlation) > 0.1:\n",
        "                has_significant_lag = True\n",
        "\n",
        "\n",
        "        # Display the lagged correlations\n",
        "        display(pd.Series(lagged_correlations).sort_index())\n",
        "\n",
        "        if has_significant_lag:\n",
        "            keywords_with_significant_lagged_correlation.append(keyword)\n",
        "\n",
        "    else:\n",
        "        print(f\"\\nRequired columns for lagged correlation with '{keyword}' not found in df_btc_cleaned.\")\n",
        "\n",
        "print(\"\\n--- Keywords with Significant Lagged Correlation (|r| > 0.1) ---\")\n",
        "if keywords_with_significant_lagged_correlation:\n",
        "    for keyword in keywords_with_significant_lagged_correlation:\n",
        "        print(keyword.replace('_trend', ''))\n",
        "else:\n",
        "    print(\"No keywords found with absolute lagged correlation greater than 0.1 at any lag period.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "84d70157"
      },
      "source": [],
      "execution_count": 69,
      "outputs": []
    }
  ]
}